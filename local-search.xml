<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记录npm经常遇到的Connt find module xxx问题</title>
    <link href="/2023/08/07/%E8%AE%B0%E5%BD%95npm%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84Connt-find-module-xxx%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/07/%E8%AE%B0%E5%BD%95npm%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84Connt-find-module-xxx%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本人经常在项目中遇到**npm：Error : Cannot find module “xxx”**等类似的问题，如下图所示，但一直不知具体原因，但多次经验也让我对此有了解决方案，在此对解决该问题的方案进行总结。</p><p><img src="/../images/image-20230807192530592.png"></p><p>nodejs版本</p><p><img src="/../images/image-20230807193401400.png"></p><p>npm版本</p><p><img src="/../images/image-20230807193410106.png"></p><p>1.最简单粗暴的办法</p><p>除node_modules 目录 再执行npm install     （亲测很有效）</p><p>2.可以先运行 清除缓存命令 </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> cache verify<br></code></pre></td></tr></table></figure><p> 再运行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> <br></code></pre></td></tr></table></figure><p>3.使用npm命令再次安装对应module （这里是本例中遇到的‘chalk’，具体根据报错来）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> chalk<br></code></pre></td></tr></table></figure><p>虽然解决方法看似简单，但真的很操心，希望以后能少点遇到此类问题，也建议配置淘宝镜像</p><p>1、配置淘宝镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <span class="hljs-regexp">//</span>单次使用<br><br>npm config set registry https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <span class="hljs-regexp">//</span>永远使用<br></code></pre></td></tr></table></figure><p>配置完成后检验是否成功：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config get registry <span class="hljs-comment">//或者下一行</span><br><br>npm info express<span class="hljs-comment">//或者上一</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>问题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秒杀超卖的7种方案</title>
    <link href="/2023/08/07/%E7%A7%92%E6%9D%80%E8%B6%85%E5%8D%96%E7%9A%847%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <url>/2023/08/07/%E7%A7%92%E6%9D%80%E8%B6%85%E5%8D%96%E7%9A%847%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>高并发场景在现场的日常工作中很常见，特别是在互联网公司中，这篇文章就来通过秒杀商品来模拟高并发的场景。文章末尾会附上文章的所有代码、脚本和测试用例。</p><ul><li><strong>本文环境：</strong> SpringBoot 2.5.7 + MySQL 8.0 X + MybatisPlus + Swagger2.9.2</li><li><strong>模拟工具：</strong> Jmeter</li><li><strong>模拟场景：</strong> 减库存-&gt;创建订单-&gt;模拟支付</li></ul><h2 id="2-商品秒杀-超卖"><a href="#2-商品秒杀-超卖" class="headerlink" title="2.商品秒杀-超卖"></a>2.商品秒杀-超卖</h2><p>在开发中，对于下面的代码，可能很熟悉：在Service里面加上<code>@Transactional</code>事务注解和Lock锁</p><p>控制层：Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式——Lock加锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/lock&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startLock</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式一...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByLock(skgId, userId);<br>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, result.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, <span class="hljs-string">&quot;哎呦喂，人也太多了，请稍后！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>业务层：Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startSecondKillByLock</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId, <span class="hljs-type">long</span> userId)</span> &#123;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 校验库存</span><br>        <span class="hljs-type">SecondKill</span> <span class="hljs-variable">secondKill</span> <span class="hljs-operator">=</span> secondKillMapper.selectById(skgId);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> secondKill.getNumber();<br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 扣库存</span><br>            secondKill.setNumber(number - <span class="hljs-number">1</span>);<br>            secondKillMapper.updateById(secondKill);<br>            <span class="hljs-comment">// 创建订单</span><br>            <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">killed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>            killed.setSeckillId(skgId);<br>            killed.setUserId(userId);<br>            killed.setState((<span class="hljs-type">short</span>) <span class="hljs-number">0</span>);<br>            killed.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            successKilledMapper.insert(killed);<br><br>            <span class="hljs-comment">// 模拟支付</span><br>            <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>();<br>            payment.setSeckillId(skgId);<br>            payment.setSeckillId(skgId);<br>            payment.setUserId(userId);<br>            payment.setMoney(<span class="hljs-number">40</span>);<br>            payment.setState((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>            payment.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            paymentMapper.insert(payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Result.error(SecondKillStateEnum.END);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScorpiosException</span>(<span class="hljs-string">&quot;异常了个乖乖&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(SecondKillStateEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面的代码应该没啥问题吧，业务方法上加事务，在处理业务的时候加锁。</p><p>但上面这样写法是有问题的，会出现超卖的情况，看下测试结果：模拟1000个并发，抢100商品</p><p>Jmeter不了解的，可以参考这篇文章：</p><blockquote><ul><li><a href="https://blog.csdn.net/zxd1435513775/article/details/106372446">https://blog.csdn.net/zxd1435513775/article/details/106372446</a></li></ul></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/6mychickmupU5s2jJ2rNPSk92pXttrWN7LY4X8mxzUIEDoh8uVLKiaX5FJ4Zvb8o7ugXMXclONEd7vpiasENT0Xyg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/6mychickmupU5s2jJ2rNPSk92pXttrWN7tRhfuWfxE2MCIqHB7xtppGwzAYnbq5bjdDTprj15JQM5dD0agU9RHw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里在业务方法开始加了锁，在业务方法结束后释放了锁。但这里的事务提交却不是这样的，有可能在事务提交之前，就已经把锁释放了，这样会导致商品超卖现象。所以加锁的时机很重要！</p><h2 id="3-解决商品超卖"><a href="#3-解决商品超卖" class="headerlink" title="3. 解决商品超卖"></a>3. 解决商品超卖</h2><p>对于上面超卖现象，主要问题出现在事务中锁释放的时机，事务未提交之前，锁已经释放。（事务提交是在整个方法执行完）。如何解决这个问题呢，就是把加锁步骤提前</p><ul><li>可以在controller层进行加锁</li><li>可以使用Aop在业务方法执行之前进行加锁</li></ul><h3 id="3-1-方式一（改进版加锁）"><a href="#3-1-方式一（改进版加锁）" class="headerlink" title="3.1 方式一（改进版加锁）"></a>3.1 方式一（改进版加锁）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式——Lock加锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/lock&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startLock</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-comment">// 在此处加锁</span><br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式一...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByLock(skgId, userId);<br>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, result.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, <span class="hljs-string">&quot;哎呦喂，人也太多了，请稍后！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 在此处释放锁</span><br>        lock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这样的加锁就可以解决事务未提交之前，锁释放的问题，可以分三种情况进行压力测试：</p><ul><li>并发数1000，商品100</li><li>并发数1000，商品1000</li><li>并发数2000，商品1000</li></ul><p>对于并发量大于商品数的情况，商品秒杀一般不会出现少卖的请况，但对于并发数小于等于商品数的时候可能会出现商品少卖情况，这也很好理解。</p><p>对于没有问题的情况就不贴图了，因为有很多种方式，贴图会太多</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/6mychickmupU5s2jJ2rNPSk92pXttrWN7icxAlGgtb1T8GGPZXNXX2yjPBTx2dictLauWu795rJfGHUSHibpQVgFzw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="3-2-方式二（AOP版加锁）"><a href="#3-2-方式二（AOP版加锁）" class="headerlink" title="3.2 方式二（AOP版加锁）"></a>3.2 方式二（AOP版加锁）</h3><p>对于上面在控制层进行加锁的方式，可能显得不优雅，那就还有另一种方式进行在事务之前加锁，那就是AOP</p><p>自定义AOP注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span>  <span class="hljs-meta">@interface</span> ServiceLock &#123;<br>    String <span class="hljs-title function_">description</span><span class="hljs-params">()</span>  <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Scope</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span> <span class="hljs-comment">//order越小越是最先执行，但更重要的是最先执行的最后结束</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockAspect</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思考：为什么不用synchronized</span><br><span class="hljs-comment">     * service 默认是单例的，并发下lock只有一个实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 互斥锁 参数默认false，不公平锁</span><br><br>    <span class="hljs-comment">// Service层切点     用于记录错误日志</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.scorpios.secondkill.aop.ServiceLock)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockAspect</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;lockAspect()&quot;)</span><br>    <span class="hljs-keyword">public</span>  Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            obj = joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125; <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在业务方法上添加AOP注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@ServiceLock</span> <span class="hljs-comment">// 使用Aop进行加锁</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startSecondKillByAop</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId, <span class="hljs-type">long</span> userId)</span> &#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 校验库存</span><br>        <span class="hljs-type">SecondKill</span> <span class="hljs-variable">secondKill</span> <span class="hljs-operator">=</span> secondKillMapper.selectById(skgId);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> secondKill.getNumber();<br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//扣库存</span><br>            secondKill.setNumber(number - <span class="hljs-number">1</span>);<br>            secondKillMapper.updateById(secondKill);<br>            <span class="hljs-comment">//创建订单</span><br>            <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">killed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>            killed.setSeckillId(skgId);<br>            killed.setUserId(userId);<br>            killed.setState((<span class="hljs-type">short</span>) <span class="hljs-number">0</span>);<br>            killed.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            successKilledMapper.insert(killed);<br><br>            <span class="hljs-comment">//支付</span><br>            <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>();<br>            payment.setSeckillId(skgId);<br>            payment.setSeckillId(skgId);<br>            payment.setUserId(userId);<br>            payment.setMoney(<span class="hljs-number">40</span>);<br>            payment.setState((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>            payment.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            paymentMapper.insert(payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Result.error(SecondKillStateEnum.END);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScorpiosException</span>(<span class="hljs-string">&quot;异常了个乖乖&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(SecondKillStateEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式二——Aop加锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/aop&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startAop</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式二...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByAop(skgId, userId);<br>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, result.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, <span class="hljs-string">&quot;哎呦喂，人也太多了，请稍后！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式在对锁的使用上，更高阶、更美观！</p><h3 id="3-3-方式三（悲观锁一）"><a href="#3-3-方式三（悲观锁一）" class="headerlink" title="3.3 方式三（悲观锁一）"></a>3.3 方式三（悲观锁一）</h3><p>除了上面在业务代码层面加锁外，还可以使用数据库自带的锁进行并发控制。</p><p>悲观锁，什么是悲观锁呢？通俗的说，在做任何事情之前，都要进行加锁确认。这种数据库级加锁操作效率较低。</p><p>使用for update一定要加上事务，当事务处理完后，for update才会将行级锁解除</p><p>如果请求数和秒杀商品数量一致，会出现少卖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式三——悲观锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/pes/lock/one&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startPesLockOne</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式三...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByUpdate(skgId, userId);<br>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, result.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, <span class="hljs-string">&quot;哎呦喂，人也太多了，请稍后！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startSecondKillByUpdate</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId, <span class="hljs-type">long</span> userId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 校验库存-悲观锁</span><br>        <span class="hljs-type">SecondKill</span> <span class="hljs-variable">secondKill</span> <span class="hljs-operator">=</span> secondKillMapper.querySecondKillForUpdate(skgId);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> secondKill.getNumber();<br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//扣库存</span><br>            secondKill.setNumber(number - <span class="hljs-number">1</span>);<br>            secondKillMapper.updateById(secondKill);<br>            <span class="hljs-comment">//创建订单</span><br>            <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">killed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>            killed.setSeckillId(skgId);<br>            killed.setUserId(userId);<br>            killed.setState((<span class="hljs-type">short</span>) <span class="hljs-number">0</span>);<br>            killed.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            successKilledMapper.insert(killed);<br><br>            <span class="hljs-comment">//支付</span><br>            <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>();<br>            payment.setSeckillId(skgId);<br>            payment.setSeckillId(skgId);<br>            payment.setUserId(userId);<br>            payment.setMoney(<span class="hljs-number">40</span>);<br>            payment.setState((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>            payment.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            paymentMapper.insert(payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Result.error(SecondKillStateEnum.END);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScorpiosException</span>(<span class="hljs-string">&quot;异常了个乖乖&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(SecondKillStateEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecondKillMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;SecondKill&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此行数据进行加锁，当整个方法将事务提交后，才会解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> skgId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(value = &quot;SELECT * FROM seckill WHERE seckill_id=#&#123;skgId&#125; FOR UPDATE&quot;)</span><br>    SecondKill <span class="hljs-title function_">querySecondKillForUpdate</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skgId&quot;)</span> Long skgId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上面是利用for update进行对查询数据加锁，加的是行锁</p><h3 id="3-4-方式四（悲观锁二）"><a href="#3-4-方式四（悲观锁二）" class="headerlink" title="3.4 方式四（悲观锁二）"></a>3.4 方式四（悲观锁二）</h3><p>悲观锁的第二种方式就是利用update更新命令来加表锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UPDATE锁表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> skgId  商品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId    用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startSecondKillByUpdateTwo</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId, <span class="hljs-type">long</span> userId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-comment">// 不校验，直接扣库存更新</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillMapper.updateSecondKillById(skgId);<br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//创建订单</span><br>            <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">killed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>            killed.setSeckillId(skgId);<br>            killed.setUserId(userId);<br>            killed.setState((<span class="hljs-type">short</span>) <span class="hljs-number">0</span>);<br>            killed.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            successKilledMapper.insert(killed);<br><br>            <span class="hljs-comment">//支付</span><br>            <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>();<br>            payment.setSeckillId(skgId);<br>            payment.setSeckillId(skgId);<br>            payment.setUserId(userId);<br>            payment.setMoney(<span class="hljs-number">40</span>);<br>            payment.setState((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>            payment.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>            paymentMapper.insert(payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Result.error(SecondKillStateEnum.END);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScorpiosException</span>(<span class="hljs-string">&quot;异常了个乖乖&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(SecondKillStateEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecondKillMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;SecondKill&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此行数据进行加锁，当整个方法将事务提交后，才会解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> skgId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(value = &quot;SELECT * FROM seckill WHERE seckill_id=#&#123;skgId&#125; FOR UPDATE&quot;)</span><br>    SecondKill <span class="hljs-title function_">querySecondKillForUpdate</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skgId&quot;)</span> Long skgId)</span>;<br><br>    <span class="hljs-meta">@Update(value = &quot;UPDATE seckill SET number=number-1 WHERE seckill_id=#&#123;skgId&#125; AND number &gt; 0&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateSecondKillById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skgId&quot;)</span> <span class="hljs-type">long</span> skgId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-方式五（乐观锁）"><a href="#3-5-方式五（乐观锁）" class="headerlink" title="3.5 方式五（乐观锁）"></a>3.5 方式五（乐观锁）</h3><p>乐观锁，顾名思义，就是对操作结果很乐观，通过利用version字段来判断数据是否被修改</p><p>乐观锁，不进行库存数量的校验，直接做库存扣减</p><p>这里使用的乐观锁会出现大量的数据更新异常（抛异常就会导致购买失败）、如果配置的抢购人数比较少、比如120:100(人数:商品) 会出现少买的情况，不推荐使用乐观锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式五——乐观锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/opt/lock&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOptLock</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式五...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-comment">// 参数添加了购买数量</span><br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByPesLock(skgId, userId,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, result.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;--&#123;&#125;&quot;</span>, userId, <span class="hljs-string">&quot;哎呦喂，人也太多了，请稍后！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startSecondKillByPesLock</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId, <span class="hljs-type">long</span> userId, <span class="hljs-type">int</span> number)</span> &#123;<br><br>    <span class="hljs-comment">// 乐观锁，不进行库存数量的校验，直接</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">SecondKill</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> secondKillMapper.selectById(skgId);<br>        <span class="hljs-comment">// 剩余的数量应该要大于等于秒杀的数量</span><br>        <span class="hljs-keyword">if</span>(kill.getNumber() &gt;= number) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillMapper.updateSecondKillByVersion(number,skgId,kill.getVersion());<br>            <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//创建订单</span><br>                <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">killed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>                killed.setSeckillId(skgId);<br>                killed.setUserId(userId);<br>                killed.setState((<span class="hljs-type">short</span>) <span class="hljs-number">0</span>);<br>                killed.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>                successKilledMapper.insert(killed);<br><br>                <span class="hljs-comment">//支付</span><br>                <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>();<br>                payment.setSeckillId(skgId);<br>                payment.setSeckillId(skgId);<br>                payment.setUserId(userId);<br>                payment.setMoney(<span class="hljs-number">40</span>);<br>                payment.setState((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>                payment.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timestamp</span>(System.currentTimeMillis()));<br>                paymentMapper.insert(payment);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> Result.error(SecondKillStateEnum.END);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScorpiosException</span>(<span class="hljs-string">&quot;异常了个乖乖&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(SecondKillStateEnum.SUCCESS);<br>&#125;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecondKillMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;SecondKill&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此行数据进行加锁，当整个方法将事务提交后，才会解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> skgId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(value = &quot;SELECT * FROM seckill WHERE seckill_id=#&#123;skgId&#125; FOR UPDATE&quot;)</span><br>    SecondKill <span class="hljs-title function_">querySecondKillForUpdate</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skgId&quot;)</span> Long skgId)</span>;<br><br>    <span class="hljs-meta">@Update(value = &quot;UPDATE seckill SET number=number-1 WHERE seckill_id=#&#123;skgId&#125; AND number &gt; 0&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateSecondKillById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skgId&quot;)</span> <span class="hljs-type">long</span> skgId)</span>;<br><br>    <span class="hljs-meta">@Update(value = &quot;UPDATE seckill  SET number=number-#&#123;number&#125;,version=version+1 WHERE seckill_id=#&#123;skgId&#125; AND version = #&#123;version&#125;&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateSecondKillByVersion</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;number&quot;)</span> <span class="hljs-type">int</span> number, <span class="hljs-meta">@Param(&quot;skgId&quot;)</span> <span class="hljs-type">long</span> skgId, <span class="hljs-meta">@Param(&quot;version&quot;)</span><span class="hljs-type">int</span> version)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>乐观锁会出现大量的数据更新异常（抛异常就会导致购买失败），会出现少买的情况，不推荐使用乐观锁</p><h3 id="3-6-方式六（阻塞队列）"><a href="#3-6-方式六（阻塞队列）" class="headerlink" title="3.6 方式六（阻塞队列）"></a>3.6 方式六（阻塞队列）</h3><p>利用阻塞队类，也可以解决高并发问题。其思想就是把接收到的请求按顺序存放到队列中，消费者线程逐一从队列里取数据进行处理，看下具体代码。</p><p>阻塞队列：这里使用静态内部类的方式来实现单例模式，在并发条件下不会出现问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 秒杀队列(固定长度为100)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondKillQueue</span> &#123;<br><br>    <span class="hljs-comment">// 队列大小</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">QUEUE_MAX_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">// 用于多线程间下单的队列</span><br>    <span class="hljs-keyword">static</span> BlockingQueue&lt;SuccessKilled&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;SuccessKilled&gt;(QUEUE_MAX_SIZE);<br><br>    <span class="hljs-comment">// 使用静态内部类，实现单例模式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SecondKillQueue</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span>&#123;<br>        <span class="hljs-comment">// 静态初始化器，由JVM来保证线程安全</span><br>        <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-type">SecondKillQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillQueue</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例队列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecondKillQueue <span class="hljs-title function_">getSkillQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.queue;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产入队</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> kill</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">     * add(e) 队列未满时，返回true；队列满则抛出IllegalStateException(“Queue full”)异常——AbstractQueue</span><br><span class="hljs-comment">     * put(e) 队列未满时，直接插入没有返回值；队列满时会阻塞等待，一直等到队列未满时再插入。</span><br><span class="hljs-comment">     * offer(e) 队列未满时，返回true；队列满时返回false。非阻塞立即返回。</span><br><span class="hljs-comment">     * offer(e, time, unit) 设定等待的时间，如果在指定时间内还不能往队列中插入数据则返回false，插入成功返回true。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  Boolean  <span class="hljs-title function_">produce</span><span class="hljs-params">(SuccessKilled kill)</span> &#123;<br>        <span class="hljs-keyword">return</span> blockingQueue.offer(kill);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费出队</span><br><span class="hljs-comment">     * poll() 获取并移除队首元素，在指定的时间内去轮询队列看有没有首元素有则返回，否者超时后返回null</span><br><span class="hljs-comment">     * take() 与带超时时间的poll类似不同在于take时候如果当前队列空了它会一直等待其他线程调用notEmpty.signal()才会被唤醒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  SuccessKilled <span class="hljs-title function_">consume</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> blockingQueue.take();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取队列大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> blockingQueue.size();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费秒杀队列：实现ApplicationRunner接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 消费秒杀队列</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SecondKillService seckillService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments <span class="hljs-keyword">var</span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;队列启动成功&quot;</span>);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 进程内队列</span><br>                    <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> SecondKillQueue.getSkillQueue().consume();<br>                    <span class="hljs-keyword">if</span>(kill != <span class="hljs-literal">null</span>)&#123;<br>                        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> seckillService.startSecondKillByAop(kill.getSeckillId(), kill.getUserId());<br>                        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span> &amp;&amp; result.equals(Result.ok(SecondKillStateEnum.SUCCESS)))&#123;<br>                            log.info(<span class="hljs-string">&quot;TaskRunner,result:&#123;&#125;&quot;</span>,result);<br>                            log.info(<span class="hljs-string">&quot;TaskRunner从消息队列取出用户，用户:&#123;&#125;&#123;&#125;&quot;</span>,kill.getUserId(),<span class="hljs-string">&quot;秒杀成功&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式六——消息队列&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/queue&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startQueue</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式六...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">SuccessKilled</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessKilled</span>();<br>        kill.setSeckillId(skgId);<br>        kill.setUserId(userId);<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> SecondKillQueue.getSkillQueue().produce(kill);<br>        <span class="hljs-comment">// 虽然进入了队列，但是不一定能秒杀成功 进队出队有时间间隙</span><br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;&#123;&#125;&quot;</span>,kill.getUserId(),<span class="hljs-string">&quot;秒杀成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;&#123;&#125;&quot;</span>,userId,<span class="hljs-string">&quot;秒杀失败&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在业务层和AOP方法中，不能抛出任何异常， throw new RuntimeException()这些抛异常代码要注释掉。因为一旦程序抛出异常就会停止，导致消费秒杀队列进程终止！</p></blockquote><p>使用阻塞队列来实现秒杀，有几点要注意：</p><ul><li>消费秒杀队列中调用业务方法加锁与不加锁情况一样，也就是<code>seckillService.startSecondKillByAop()</code>、<code>seckillService.startSecondKillByLock()</code>方法结果一样，这也很好理解</li><li>当队列长度与商品数量一致时，会出现少卖的现象，可以调大数值</li><li>下面是队列长度1000，商品数量1000，并发数2000情况下出现的少卖</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/6mychickmupU5s2jJ2rNPSk92pXttrWN7QVspLsqttacbqibPJqJdW8z351tHAKSwWsSlnTQ4VPL8GIL2P8150kQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="3-7-方式七（Disruptor队列）"><a href="#3-7-方式七（Disruptor队列）" class="headerlink" title="3.7.方式七（Disruptor队列）"></a>3.7.方式七（Disruptor队列）</h3><p>Disruptor是个高性能队列，研发的初衷是解决内存队列的延迟问题，在性能测试中发现竟然与I&#x2F;O操作处于同样的数量级，基于Disruptor开发的系统单线程能支撑每秒600万订单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 事件生成工厂（用来初始化预分配事件对象）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondKillEventFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventFactory</span>&lt;SecondKillEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SecondKillEvent <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillEvent</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 事件对象（秒杀事件）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondKillEvent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> seckillId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> userId;<br><br> <span class="hljs-comment">// set/get方法略</span><br><br>&#125;<br><span class="hljs-comment">// 使用translator方式生产者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondKillEventProducer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> EventTranslatorVararg&lt;SecondKillEvent&gt; translator = (seckillEvent, seq, objs) -&gt; &#123;<br>        seckillEvent.setSeckillId((Long) objs[<span class="hljs-number">0</span>]);<br>        seckillEvent.setUserId((Long) objs[<span class="hljs-number">1</span>]);<br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RingBuffer&lt;SecondKillEvent&gt; ringBuffer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecondKillEventProducer</span><span class="hljs-params">(RingBuffer&lt;SecondKillEvent&gt; ringBuffer)</span>&#123;<br>        <span class="hljs-built_in">this</span>.ringBuffer = ringBuffer;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secondKill</span><span class="hljs-params">(<span class="hljs-type">long</span> seckillId, <span class="hljs-type">long</span> userId)</span>&#123;<br>        <span class="hljs-built_in">this</span>.ringBuffer.publishEvent(translator, seckillId, userId);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 消费者(秒杀处理器)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondKillEventConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventHandler</span>&lt;SecondKillEvent&gt; &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SecondKillService</span> <span class="hljs-variable">secondKillService</span> <span class="hljs-operator">=</span> (SecondKillService) SpringUtil.getBean(<span class="hljs-string">&quot;secondKillService&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(SecondKillEvent seckillEvent, <span class="hljs-type">long</span> seq, <span class="hljs-type">boolean</span> bool)</span> &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> secondKillService.startSecondKillByAop(seckillEvent.getSeckillId(), seckillEvent.getUserId());<br>        <span class="hljs-keyword">if</span>(result.equals(Result.ok(SecondKillStateEnum.SUCCESS)))&#123;<br>            log.info(<span class="hljs-string">&quot;用户:&#123;&#125;&#123;&#125;&quot;</span>,seckillEvent.getUserId(),<span class="hljs-string">&quot;秒杀成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisruptorUtil</span> &#123;<br><br>    <span class="hljs-keyword">static</span> Disruptor&lt;SecondKillEvent&gt; disruptor;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-type">SecondKillEventFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillEventFactory</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ringBufferSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>;<br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">threadFactory</span> <span class="hljs-operator">=</span> runnable -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable);<br>        disruptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Disruptor</span>&lt;&gt;(factory, ringBufferSize, threadFactory);<br>        disruptor.handleEventsWith(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillEventConsumer</span>());<br>        disruptor.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">(SecondKillEvent kill)</span>&#123;<br>        RingBuffer&lt;SecondKillEvent&gt; ringBuffer = disruptor.getRingBuffer();<br>        <span class="hljs-type">SecondKillEventProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillEventProducer</span>(ringBuffer);<br>        producer.secondKill(kill.getSeckillId(),kill.getUserId());<br>    &#125;<br>&#125;<br><span class="hljs-meta">@ApiOperation(value=&quot;秒杀实现方式七——Disruptor队列&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/start/disruptor&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startDisruptor</span><span class="hljs-params">(<span class="hljs-type">long</span> skgId)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始秒杀方式七...&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble() * (<span class="hljs-number">99999</span> - <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">SecondKillEvent</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondKillEvent</span>();<br>        kill.setSeckillId(skgId);<br>        kill.setUserId(userId);<br>        DisruptorUtil.producer(kill);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>经过测试，发现使用Disruptor队列队列，与自定义队列有着同样的问题，也会出现超卖的情况，但效率有所提高。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>对于上面七种实现并发的方式，做一下总结：</p><ul><li>一、二方式是在代码中利用锁和事务的方式解决了并发问题，主要解决的是锁要加载事务之前</li><li>三、四、五方式主要是数据库的锁来解决并发问题，方式三是利用for upate对表加行锁，方式四是利用update来对表加锁，方式五是通过增加version字段来控制数据库的更新操作，方式五的效果最差</li><li>六、七方式是通过队列来解决并发问题，这里需要特别注意的是，在代码中不能通过throw抛异常，否则消费线程会终止，而且由于进队和出队存在时间间隙，会导致商品少卖</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>秒杀超卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2023/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote><p>本文内容来源于书籍和网络。</p></blockquote><p>[TOC]</p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。</p><p>拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。</p><h1 id="二、创建型"><a href="#二、创建型" class="headerlink" title="二、创建型"></a>二、创建型</h1><h2 id="1-单例（Singleton）"><a href="#1-单例（Singleton）" class="headerlink" title="1. 单例（Singleton）"></a>1. 单例（Singleton）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_176.png" alt="img"></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Ⅰ-懒汉式-线程不安全"><a href="#Ⅰ-懒汉式-线程不安全" class="headerlink" title="Ⅰ 懒汉式-线程不安全"></a>Ⅰ 懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;    <br>                        <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;            <br>            uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();        <br>        &#125;        <br>        <span class="hljs-keyword">return</span> uniqueInstance;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅱ-饿汉式-线程安全"><a href="#Ⅱ-饿汉式-线程安全" class="headerlink" title="Ⅱ 饿汉式-线程安全"></a>Ⅱ 饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">uniqueInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br></code></pre></td></tr></table></figure><h4 id="Ⅲ-懒汉式-线程安全"><a href="#Ⅲ-懒汉式-线程安全" class="headerlink" title="Ⅲ 懒汉式-线程安全"></a>Ⅲ 懒汉式-线程安全</h4><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;    <br>    <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;        <br>    uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();    <br>&#125;    <br> <span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅳ-双重校验锁-线程安全"><a href="#Ⅳ-双重校验锁-线程安全" class="headerlink" title="Ⅳ 双重校验锁-线程安全"></a>Ⅳ 双重校验锁-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;            <br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;                <br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;                    <br>                    uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();                <br>                &#125;            <br>            &#125;        <br>        &#125;        <br>        <span class="hljs-keyword">return</span> uniqueInstance;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance &#x3D;&#x3D; null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句：第一个 if 语句用来避免 uniqueInstance 已经被实例化之后的加锁操作，而第二个 if 语句进行了加锁，所以只能有一个线程进入，就不会出现 uniqueInstance &#x3D;&#x3D; null 时两个线程同时进行实例化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;    <br><span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;        <br>uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();    <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ 静态内部类实现"></a>Ⅴ 静态内部类实现</h4><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;    <br>    &#125;    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;        <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();    <br>    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅵ-枚举实现"><a href="#Ⅵ-枚举实现" class="headerlink" title="Ⅵ 枚举实现"></a>Ⅵ 枚举实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;    <br>    <br>    INSTANCE;    <br>    <br>    <span class="hljs-keyword">private</span> String objName;    <br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjName</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> objName;    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObjName</span><span class="hljs-params">(String objName)</span> &#123;        <br>        <span class="hljs-built_in">this</span>.objName = objName;    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    <br>        <br>        <span class="hljs-comment">// 单例测试        </span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">firstSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;        firstSingleton.setObjName(<span class="hljs-string">&quot;firstName&quot;</span>);        System.out.println(firstSingleton.getObjName());        <br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">secondSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;        secondSingleton.setObjName(<span class="hljs-string">&quot;secondName&quot;</span>);        System.out.println(firstSingleton.getObjName());        System.out.println(secondSingleton.getObjName());      <br>        <br>        <span class="hljs-comment">// 反射获取实例测试        </span><br>        <span class="hljs-keyword">try</span> &#123;            <br>            Singleton[] enumConstants = Singleton.class.getEnumConstants();            <span class="hljs-keyword">for</span> (Singleton enumConstant : enumConstants) &#123;                System.out.println(enumConstant.getObjName());            <br>                                                                                                                                                 &#125;        <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <br>            e.printStackTrace();        <br>        &#125;    <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">   firstName</span><br><span class="hljs-attribute">secondName</span><br><span class="hljs-attribute">secondName</span><br><span class="hljs-attribute">secondName</span><br></code></pre></td></tr></table></figure><p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p><p>该实现在多次序列化和序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime()">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--">java.lang.System#getSecurityManager()</a></li></ul><h2 id="2-简单工厂（Simple-Factory）"><a href="#2-简单工厂（Simple-Factory）" class="headerlink" title="2. 简单工厂（Simple Factory）"></a>2. 简单工厂（Simple Factory）</h2><h3 id="Intent-1"><a href="#Intent-1" class="headerlink" title="Intent"></a>Intent</h3><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h3 id="Class-Diagram-1"><a href="#Class-Diagram-1" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_155.png" alt="img"></p><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Product</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ConcreteProduct</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Product</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ConcreteProduct1</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Product</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ConcreteProduct2</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Product</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;        <br>        Product product;        <br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>) &#123;            <br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();        <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">2</span>) &#123;            <br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();        <br>        &#125; <span class="hljs-keyword">else</span> &#123;            <br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();        <br>        &#125;        <br>        <span class="hljs-comment">// do something with the product    </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleFactory</span> &#123;    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;        <br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>) &#123;            <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();        <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">2</span>) &#123;            <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();        <br>        &#125;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br>        <span class="hljs-type">SimpleFactory</span> <span class="hljs-variable">simpleFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFactory</span>();        <br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> simpleFactory.createProduct(<span class="hljs-number">1</span>);        <br>        <span class="hljs-comment">// do something with the product    </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-工厂方法（Factory-Method）"><a href="#3-工厂方法（Factory-Method）" class="headerlink" title="3. 工厂方法（Factory Method）"></a>3. 工厂方法（Factory Method）</h2><h3 id="Intent-2"><a href="#Intent-2" class="headerlink" title="Intent"></a>Intent</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p><h3 id="Class-Diagram-2"><a href="#Class-Diagram-2" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_177.png" alt="img"></p><h3 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;    <br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span>;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> factoryMethod();        <br>        <span class="hljs-comment">// do something with the product    </span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--">javax.xml.bind.JAXBContext</a></li></ul><h2 id="4-抽象工厂（Abstract-Factory）"><a href="#4-抽象工厂（Abstract-Factory）" class="headerlink" title="4. 抽象工厂（Abstract Factory）"></a>4. 抽象工厂（Abstract Factory）</h2><h3 id="Intent-3"><a href="#Intent-3" class="headerlink" title="Intent"></a>Intent</h3><p>提供一个接口，用于创建 <strong>相关的对象家族</strong> 。</p><h3 id="Class-Diagram-3"><a href="#Class-Diagram-3" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p><p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p><p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p><p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_175.png" alt="img"></p><h3 id="Implementation-3"><a href="#Implementation-3" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractProductA</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractProductB</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductA1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductA</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductA2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductA</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductB1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductB</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductB2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductB</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span> &#123;    <br>    <span class="hljs-keyword">abstract</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span>;    <br>    <span class="hljs-keyword">abstract</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span>;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;    <br>    AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA1</span>();    &#125;    <br>    AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB1</span>();    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;   <br>    AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA2</span>();    &#125;    <br>    AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB2</span>();    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br>        <span class="hljs-type">AbstractFactory</span> <span class="hljs-variable">abstractFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFactory1</span>();        <br>        <span class="hljs-type">AbstractProductA</span> <span class="hljs-variable">productA</span> <span class="hljs-operator">=</span> abstractFactory.createProductA();        <span class="hljs-type">AbstractProductB</span> <span class="hljs-variable">productB</span> <span class="hljs-operator">=</span> abstractFactory.createProductB();        <br>        <span class="hljs-comment">// do something with productA and productB    </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-2"><a href="#JDK-2" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactory</a></li></ul><h2 id="5-生成器（Builder）"><a href="#5-生成器（Builder）" class="headerlink" title="5. 生成器（Builder）"></a>5. 生成器（Builder）</h2><h3 id="Intent-4"><a href="#Intent-4" class="headerlink" title="Intent"></a>Intent</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="Class-Diagram-4"><a href="#Class-Diagram-4" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_173.png" alt="img"></p><h3 id="Implementation-4"><a href="#Implementation-4" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;  <br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">char</span>[] value;    <br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> count;    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractStringBuilder</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;        <br>        count = <span class="hljs-number">0</span>;        <br>        value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[capacity];    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;        <br>        ensureCapacityInternal(count + <span class="hljs-number">1</span>);        <br>        value[count++] = c;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;        <br>        <span class="hljs-comment">// overflow-conscious code        </span><br>        <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>)                     expandCapacity(minimumCapacity);    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> value.length * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;        <br>        <span class="hljs-keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="hljs-number">0</span>)            <br>            newCapacity = minimumCapacity;        <br>        <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) &#123;            <br>            <span class="hljs-keyword">if</span> (minimumCapacity &lt; <span class="hljs-number">0</span>) <br>                <span class="hljs-comment">// overflow                </span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();            <br>            newCapacity = Integer.MAX_VALUE;        <br>        &#125;        <br>        value = Arrays.copyOf(value, newCapacity);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StringBuilder</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>);    &#125;    <br>    <span class="hljs-meta">@Override</span>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;       <br>        <span class="hljs-comment">// Create a copy, don&#x27;t share the array        </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value, <span class="hljs-number">0</span>, count);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;            <br>            sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + i));        <br>        &#125;        System.out.println(sb.toString());    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abcdefghijklmnopqrstuvwxyz</span><br></code></pre></td></tr></table></figure><h3 id="JDK-3"><a href="#JDK-3" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder">Apache Camel builders</a></li></ul><h2 id="6-原型模式（Prototype）"><a href="#6-原型模式（Prototype）" class="headerlink" title="6. 原型模式（Prototype）"></a>6. 原型模式（Prototype）</h2><h3 id="Intent-5"><a href="#Intent-5" class="headerlink" title="Intent"></a>Intent</h3><p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p><h3 id="Class-Diagram-5"><a href="#Class-Diagram-5" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_168.png" alt="img"></p><h3 id="Implementation-5"><a href="#Implementation-5" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span> &#123;    <br>    <span class="hljs-keyword">abstract</span> Prototype <span class="hljs-title function_">myClone</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Prototype</span> &#123;    <br>    <span class="hljs-keyword">private</span> String filed;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcretePrototype</span><span class="hljs-params">(String filed)</span> &#123;        <br>        <span class="hljs-built_in">this</span>.filed = filed;    <br>    &#125;    <br>    <span class="hljs-meta">@Override</span>    <br>    Prototype <span class="hljs-title function_">myClone</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(filed);    <br>    &#125;    <br>    <span class="hljs-meta">@Override</span>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;        <br>        <span class="hljs-keyword">return</span> filed;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br>        <span class="hljs-type">Prototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-string">&quot;abc&quot;</span>);        <br>        <span class="hljs-type">Prototype</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> prototype.myClone();            System.out.println(clone.toString());    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abc</span><br></code></pre></td></tr></table></figure><h3 id="JDK-4"><a href="#JDK-4" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone()">java.lang.Object#clone()</a></li></ul><h1 id="三、行为型"><a href="#三、行为型" class="headerlink" title="三、行为型"></a>三、行为型</h1><h2 id="1-责任链（Chain-Of-Responsibility）"><a href="#1-责任链（Chain-Of-Responsibility）" class="headerlink" title="1. 责任链（Chain Of Responsibility）"></a>1. 责任链（Chain Of Responsibility）</h2><h3 id="Intent-6"><a href="#Intent-6" class="headerlink" title="Intent"></a>Intent</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p><h3 id="Class-Diagram-6"><a href="#Class-Diagram-6" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Handler：定义处理请求的接口，并且实现后继链（successor）</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_171.png" alt="img"></p><h3 id="Implementation-6"><a href="#Implementation-6" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">protected</span> Handler successor;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.successor = successor;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandler1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteHandler1</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(successor);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getType() == RequestType.TYPE1) &#123;<br>            System.out.println(request.getName() + <span class="hljs-string">&quot; is handle by ConcreteHandler1&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (successor != <span class="hljs-literal">null</span>) &#123;<br>            successor.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandler2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteHandler2</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(successor);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getType() == RequestType.TYPE2) &#123;<br>            System.out.println(request.getName() + <span class="hljs-string">&quot; is handle by ConcreteHandler2&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (successor != <span class="hljs-literal">null</span>) &#123;<br>            successor.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span> &#123;<br>    <span class="hljs-keyword">private</span> RequestType type;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Request</span><span class="hljs-params">(RequestType type, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> RequestType <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RequestType</span> &#123;<br>    TYPE1, TYPE2<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handler1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandler1</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handler2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandler2</span>(handler1);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(RequestType.TYPE1, <span class="hljs-string">&quot;request1&quot;</span>);<br>        handler2.handleRequest(request1);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(RequestType.TYPE2, <span class="hljs-string">&quot;request2&quot;</span>);<br>        handler2.handleRequest(request2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">request1 <span class="hljs-keyword">is</span> handle <span class="hljs-keyword">by</span> ConcreteHandler1<br>request2 <span class="hljs-keyword">is</span> handle <span class="hljs-keyword">by</span> ConcreteHandler2<br></code></pre></td></tr></table></figure><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK"></a>JDK</h3><ul><li>[java.util.logging.Logger#log()](<a href="http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log">http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log</a>(java.util.logging.Level, java.lang.String))</li><li><a href="https://commons.apache.org/proper/commons-chain/index.html">Apache Commons Chain</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-">javax.servlet.Filter#doFilter()</a></li></ul><h2 id="2-命令（Command）"><a href="#2-命令（Command）" class="headerlink" title="2. 命令（Command）"></a>2. 命令（Command）</h2><h3 id="Intent-7"><a href="#Intent-7" class="headerlink" title="Intent"></a>Intent</h3><p>将命令封装成对象中，具有以下作用：</p><ul><li>使用命令来参数化其它对象</li><li>将命令放入队列中进行排队</li><li>将命令的操作记录到日志中</li><li>支持可撤销的操作</li></ul><h3 id="Class-Diagram-7"><a href="#Class-Diagram-7" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Command：命令</li><li>Receiver：命令接收者，也就是命令真正的执行者</li><li>Invoker：通过它来调用命令</li><li>Client：可以设置命令与命令的接收者</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_170.png" alt="img"></p><h3 id="Implementation-7"><a href="#Implementation-7" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个遥控器，可以控制电灯开关。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_174.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    Light light;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOnCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.on();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    Light light;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOffCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.off();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is on!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is off!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遥控器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-keyword">private</span> Command[] onCommands;<br>    <span class="hljs-keyword">private</span> Command[] offCommands;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">slotNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Invoker</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.onCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[slotNum];<br>        <span class="hljs-built_in">this</span>.offCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[slotNum];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnCommand</span><span class="hljs-params">(Command command, <span class="hljs-type">int</span> slot)</span> &#123;<br>        onCommands[slot] = command;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOffCommand</span><span class="hljs-params">(Command command, <span class="hljs-type">int</span> slot)</span> &#123;<br>        offCommands[slot] = command;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> slot)</span> &#123;<br>        onCommands[slot].execute();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> slot)</span> &#123;<br>        offCommands[slot].execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Invoker</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>();<br>        <span class="hljs-type">Light</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>();<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">lightOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOnCommand</span>(light);<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">lightOffCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOffCommand</span>(light);<br>        invoker.setOnCommand(lightOnCommand, <span class="hljs-number">0</span>);<br>        invoker.setOffCommand(lightOffCommand, <span class="hljs-number">0</span>);<br>        invoker.onButtonWasPushed(<span class="hljs-number">0</span>);<br>        invoker.offButtonWasPushed(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki">Netflix Hystrix</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/Action.html">javax.swing.Action</a></li></ul><h2 id="3-解释器（Interpreter）"><a href="#3-解释器（Interpreter）" class="headerlink" title="3. 解释器（Interpreter）"></a>3. 解释器（Interpreter）</h2><h3 id="Intent-8"><a href="#Intent-8" class="headerlink" title="Intent"></a>Intent</h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。</p><h3 id="Class-Diagram-8"><a href="#Class-Diagram-8" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression。</li><li>Context：上下文，包含解释器之外的一些全局信息。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_148.png" alt="img"></p><h3 id="Implementation-8"><a href="#Implementation-8" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。</p><p>例如一颗解析树为 D And (A Or (B C))，文本 “D A” 满足该解析树定义的规则。</p><p>这里的 Context 指的是 String。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">literal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TerminalExpression</span><span class="hljs-params">(String str)</span> &#123;<br>        literal = str;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(str);<br>        <span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> st.nextToken();<br>            <span class="hljs-keyword">if</span> (test.equals(literal)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AndExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AndExpression</span><span class="hljs-params">(Expression expression1, Expression expression2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.expression1 = expression1;<br>        <span class="hljs-built_in">this</span>.expression2 = expression2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> expression1.interpret(str) &amp;&amp; expression2.interpret(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrExpression</span><span class="hljs-params">(Expression expression1, Expression expression2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.expression1 = expression1;<br>        <span class="hljs-built_in">this</span>.expression2 = expression2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> expression1.interpret(str) || expression2.interpret(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">构建解析树</span><br><span class="hljs-comment">**/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Expression <span class="hljs-title function_">buildInterpreterTree</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Literal</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-comment">// B C</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">alternation1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrExpression</span>(terminal2, terminal3);<br>        <span class="hljs-comment">// A Or (B C)</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">alternation2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrExpression</span>(terminal1, alternation1);<br>        <span class="hljs-comment">// D And (A Or (B C))</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndExpression</span>(terminal4, alternation2);<br>    &#125;<br>            <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">define</span> <span class="hljs-operator">=</span> buildInterpreterTree();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D A&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;A B&quot;</span>;<br>        System.out.println(define.interpret(context1));<br>        System.out.println(define.interpret(context2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.Pattern</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html">java.text.Normalizer</a></li><li>All subclasses of <a href="http://docs.oracle.com/javase/8/docs/api/java/text/Format.html">java.text.Format</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html">javax.el.ELResolver</a></li></ul><h2 id="4-迭代器（Iterator）"><a href="#4-迭代器（Iterator）" class="headerlink" title="4. 迭代器（Iterator）"></a>4. 迭代器（Iterator）</h2><h3 id="Intent-9"><a href="#Intent-9" class="headerlink" title="Intent"></a>Intent</h3><p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p><h3 id="Class-Diagram-9"><a href="#Class-Diagram-9" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；</li><li>Iterator 主要定义了 hasNext() 和 next() 方法。</li><li>Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_163.png" alt="img"></p><h3 id="Implementation-9"><a href="#Implementation-9" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer[] items;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteAggregate</span><span class="hljs-params">()</span> &#123;<br>        items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>            items[i] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>&lt;Integer&gt;(items);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&lt;Item&gt; &#123;<br>    Item <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span>&lt;Item&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-keyword">private</span> Item[] items;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(Item[] items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> items[position++];<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; items.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Aggregate</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        Iterator&lt;Integer&gt; iterator = aggregate.createIterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li></ul><h2 id="5-中介者（Mediator）"><a href="#5-中介者（Mediator）" class="headerlink" title="5. 中介者（Mediator）"></a>5. 中介者（Mediator）</h2><h3 id="Intent-10"><a href="#Intent-10" class="headerlink" title="Intent"></a>Intent</h3><p>集中相关对象之间复杂的沟通和控制方式。</p><h3 id="Class-Diagram-10"><a href="#Class-Diagram-10" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。</li><li>Colleague：同事，相关对象</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_154.png" alt="img"></p><h3 id="Implementation-10"><a href="#Implementation-10" class="headerlink" title="Implementation"></a>Implementation</h3><p>Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：</p><p><img src="https://www.xuxueli.com/blog/static/images/img_158.jpg" alt="img"></p><p>使用中介者模式可以将复杂的依赖结构变成星形结构：</p><p><img src="https://www.xuxueli.com/blog/static/images/img_160.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;alarm&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAlarm</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doAlarm()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeePot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;coffeePot&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCoffeePot</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doCoffeePot()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calender</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;calender&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCalender</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doCalender()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sprinkler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;sprinkler&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSprinkler</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doSprinkler()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(String eventType)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">private</span> Alarm alarm;<br>    <span class="hljs-keyword">private</span> CoffeePot coffeePot;<br>    <span class="hljs-keyword">private</span> Calender calender;<br>    <span class="hljs-keyword">private</span> Sprinkler sprinkler;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteMediator</span><span class="hljs-params">(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.alarm = alarm;<br>        <span class="hljs-built_in">this</span>.coffeePot = coffeePot;<br>        <span class="hljs-built_in">this</span>.calender = calender;<br>        <span class="hljs-built_in">this</span>.sprinkler = sprinkler;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(String eventType)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (eventType) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;alarm&quot;</span>:<br>                doAlarmEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;coffeePot&quot;</span>:<br>                doCoffeePotEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;calender&quot;</span>:<br>                doCalenderEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                doSprinklerEvent();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAlarmEvent</span><span class="hljs-params">()</span> &#123;<br>        alarm.doAlarm();<br>        coffeePot.doCoffeePot();<br>        calender.doCalender();<br>        sprinkler.doSprinkler();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCoffeePotEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCalenderEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSprinklerEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Alarm</span>();<br>        <span class="hljs-type">CoffeePot</span> <span class="hljs-variable">coffeePot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeePot</span>();<br>        <span class="hljs-type">Calender</span> <span class="hljs-variable">calender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calender</span>();<br>        <span class="hljs-type">Sprinkler</span> <span class="hljs-variable">sprinkler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sprinkler</span>();<br>        <span class="hljs-type">Mediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteMediator</span>(alarm, coffeePot, calender, sprinkler);<br>        <span class="hljs-comment">// 闹钟事件到达，调用中介者就可以操作相关对象</span><br>        alarm.onEvent(mediator);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">doAlarm</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">doCoffeePot</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">doCalender</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">doSprinkler</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h3 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK"></a>JDK</h3><ul><li>All scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-">java.util.concurrent.Executor#execute()</a></li><li>submit() and invokeXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">java.util.concurrent.ExecutorService</a></li><li>scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">java.util.concurrent.ScheduledExecutorService</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java.lang.reflect.Method#invoke()</a></li></ul><h2 id="6-备忘录（Memento）"><a href="#6-备忘录（Memento）" class="headerlink" title="6. 备忘录（Memento）"></a>6. 备忘录（Memento）</h2><h3 id="Intent-11"><a href="#Intent-11" class="headerlink" title="Intent"></a>Intent</h3><p>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</p><h3 id="Class-Diagram-11"><a href="#Class-Diagram-11" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Originator：原始对象</li><li>Caretaker：负责保存好备忘录</li><li>Menento：备忘录，存储原始对象的的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_162.png" alt="img"></p><h3 id="Implementation-11"><a href="#Implementation-11" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。</p><p>实现参考：<a href="https://www.oodesign.com/memento-pattern-calculator-example-java-sourcecode.html">Memento Pattern - Calculator Example - Java Sourcecode</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">Originator Interface</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-comment">// Create Memento</span><br>    PreviousCalculationToCareTaker <span class="hljs-title function_">backupLastCalculation</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// setMemento</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">restorePreviousCalculation</span><span class="hljs-params">(PreviousCalculationToCareTaker memento)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getCalculationResult</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecondNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> secondNumber)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Originator Implementation</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> firstNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> secondNumber;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PreviousCalculationToCareTaker <span class="hljs-title function_">backupLastCalculation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// create a memento object used for restoring two numbers</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreviousCalculationImp</span>(firstNumber, secondNumber);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restorePreviousCalculation</span><span class="hljs-params">(PreviousCalculationToCareTaker memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber();<br>        <span class="hljs-built_in">this</span>.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCalculationResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// result is adding two numbers</span><br>        <span class="hljs-keyword">return</span> firstNumber + secondNumber;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = firstNumber;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecondNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> secondNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.secondNumber = secondNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">Memento Interface to Originator</span><br><span class="hljs-comment">This interface allows the originator to restore its state</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PreviousCalculationToOriginator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNumber</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getSecondNumber</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">Memento interface to CalculatorOperator (Caretaker)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PreviousCalculationToCareTaker</span> &#123;<br><span class="hljs-comment">// no operations permitted for the caretaker</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">Memento Object Implementation</span><br><span class="hljs-comment">Note that this object implements both interfaces to Originator and CareTaker</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreviousCalculationImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PreviousCalculationToCareTaker</span>,<br>    PreviousCalculationToOriginator &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> firstNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> secondNumber;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PreviousCalculationImp</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber, <span class="hljs-type">int</span> secondNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = firstNumber;<br>        <span class="hljs-built_in">this</span>.secondNumber = secondNumber;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstNumber;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSecondNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> secondNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">CareTaker object</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// program starts</span><br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorImp</span>();<br>        <span class="hljs-comment">// assume user enters two numbers</span><br>        calculator.setFirstNumber(<span class="hljs-number">10</span>);<br>        calculator.setSecondNumber(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">// find result</span><br>        System.out.println(calculator.getCalculationResult());<br>        <span class="hljs-comment">// Store result of this calculation in case of error</span><br>        <span class="hljs-type">PreviousCalculationToCareTaker</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> calculator.backupLastCalculation();<br>        <span class="hljs-comment">// user enters a number</span><br>        calculator.setFirstNumber(<span class="hljs-number">17</span>);<br>        <span class="hljs-comment">// user enters a wrong second number and calculates result</span><br>        calculator.setSecondNumber(-<span class="hljs-number">290</span>);<br>        <span class="hljs-comment">// calculate result</span><br>        System.out.println(calculator.getCalculationResult());<br>        <span class="hljs-comment">// user hits CTRL + Z to undo last operation and see last result</span><br>        calculator.restorePreviousCalculation(memento);<br>        <span class="hljs-comment">// result restored</span><br>        System.out.println(calculator.getCalculationResult());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff">110<br><span class="hljs-deletion">-273</span><br>110<br></code></pre></td></tr></table></figure><h3 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.Serializable</li></ul><h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><h3 id="Intent-12"><a href="#Intent-12" class="headerlink" title="Intent"></a>Intent</h3><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_152.jpg" alt="img"></p><h3 id="Class-Diagram-12"><a href="#Class-Diagram-12" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p><p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_165.png" alt="img"></p><h3 id="Implementation-12"><a href="#Implementation-12" class="headerlink" title="Implementation"></a>Implementation</h3><p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_167.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> humidity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> pressure;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeatherData</span><span class="hljs-params">()</span> &#123;<br>        observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMeasurements</span><span class="hljs-params">(<span class="hljs-type">float</span> temperature, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>        <span class="hljs-built_in">this</span>.humidity = humidity;<br>        <span class="hljs-built_in">this</span>.pressure = pressure;<br>        notifyObserver();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        observers.add(o);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> observers.indexOf(o);<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            observers.remove(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer o : observers) &#123;<br>            o.update(temperature, humidity, pressure);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatisticsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StatisticsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.reisterObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;StatisticsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrentConditionsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CurrentConditionsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.registerObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentConditionsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherStation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WeatherData</span> <span class="hljs-variable">weatherData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherData</span>();<br>        <span class="hljs-type">CurrentConditionsDisplay</span> <span class="hljs-variable">currentConditionsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CurrentConditionsDisplay</span>(weatherData);<br>        <span class="hljs-type">StatisticsDisplay</span> <span class="hljs-variable">statisticsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatisticsDisplay</span>(weatherData);<br>        weatherData.setMeasurements(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        weatherData.setMeasurements(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CurrentConditionsDisplay</span>.update: <span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">StatisticsDisplay</span>.update: <span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">CurrentConditionsDisplay</span>.update: <span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">StatisticsDisplay</span>.update: <span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html">java.util.EventListener</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html">javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li></ul><h2 id="8-状态（State）"><a href="#8-状态（State）" class="headerlink" title="8. 状态（State）"></a>8. 状态（State）</h2><h3 id="Intent-13"><a href="#Intent-13" class="headerlink" title="Intent"></a>Intent</h3><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</p><h3 id="Class-Diagram-13"><a href="#Class-Diagram-13" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_157.png" alt="img"></p><h3 id="Implementation-13"><a href="#Implementation-13" class="headerlink" title="Implementation"></a>Implementation</h3><p>糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_159.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 投入 25 分钱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 退回 25 分钱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转动曲柄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发放糖果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HasQuarterState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">private</span> GumballMachine gumballMachine;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HasQuarterState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t insert another quarter&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Quarter returned&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getNoQuarterState());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned...&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getSoldState());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;No gumball dispensed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoQuarterState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    GumballMachine gumballMachine;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NoQuarterState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You insert a quarter&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getHasQuarterState());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You haven&#x27;t insert a quarter&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned, but there&#x27;s no quarter&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You need to pay first&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoldOutState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    GumballMachine gumballMachine;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoldOutState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t insert a quarter, the machine is sold out&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t eject, you haven&#x27;t inserted a quarter yet&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned, but there are no gumballs&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;No gumball dispensed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoldState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    GumballMachine gumballMachine;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoldState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Please wait, we&#x27;re already giving you a gumball&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sorry, you already turned the crank&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Turning twice doesn&#x27;t get you another gumball!&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        gumballMachine.releaseBall();<br>        <span class="hljs-keyword">if</span> (gumballMachine.getCount() &gt; <span class="hljs-number">0</span>) &#123;<br>            gumballMachine.setState(gumballMachine.getNoQuarterState());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Oops, out of gumballs&quot;</span>);<br>            gumballMachine.setState(gumballMachine.getSoldOutState());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GumballMachine</span> &#123;<br>    <span class="hljs-keyword">private</span> State soldOutState;<br>    <span class="hljs-keyword">private</span> State noQuarterState;<br>    <span class="hljs-keyword">private</span> State hasQuarterState;<br>    <span class="hljs-keyword">private</span> State soldState;<br>    <span class="hljs-keyword">private</span> State state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GumballMachine</span><span class="hljs-params">(<span class="hljs-type">int</span> numberGumballs)</span> &#123;<br>        count = numberGumballs;<br>        soldOutState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoldOutState</span>(<span class="hljs-built_in">this</span>);<br>        noQuarterState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoQuarterState</span>(<span class="hljs-built_in">this</span>);<br>        hasQuarterState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HasQuarterState</span>(<span class="hljs-built_in">this</span>);<br>        soldState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoldState</span>(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (numberGumballs &gt; <span class="hljs-number">0</span>) &#123;<br>            state = noQuarterState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            state = soldOutState;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        state.insertQuarter();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        state.ejectQuarter();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        state.turnCrank();<br>        state.dispense();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseBall</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A gumball comes rolling out the slot...&quot;</span>);<br>        <span class="hljs-keyword">if</span> (count != <span class="hljs-number">0</span>) &#123;<br>            count -= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getSoldOutState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> soldOutState;<br>    &#125;<br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getNoQuarterState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> noQuarterState;<br>    &#125;<br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getHasQuarterState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hasQuarterState;<br>    &#125;<br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getSoldState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> soldState;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GumballMachine</span> <span class="hljs-variable">gumballMachine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GumballMachine</span>(<span class="hljs-number">5</span>);<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.ejectQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.ejectQuarter();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stata">You insert a quarter<br>You turned...<br>A gumball comes <span class="hljs-keyword">rolling</span> <span class="hljs-keyword">out</span> the slot...<br>You insert a quarter<br>Quarter returned<br>You turned, but there&#x27;s <span class="hljs-keyword">no</span> quarter<br>You need to pay first<br>You insert a quarter<br>You turned...<br>A gumball comes <span class="hljs-keyword">rolling</span> <span class="hljs-keyword">out</span> the slot...<br>You insert a quarter<br>You turned...<br>A gumball comes <span class="hljs-keyword">rolling</span> <span class="hljs-keyword">out</span> the slot...<br>You haven&#x27;t insert a quarter<br>You insert a quarter<br>You can&#x27;t insert another quarter<br>You turned...<br>A gumball comes <span class="hljs-keyword">rolling</span> <span class="hljs-keyword">out</span> the slot...<br>You insert a quarter<br>You turned...<br>A gumball comes <span class="hljs-keyword">rolling</span> <span class="hljs-keyword">out</span> the slot...<br>Oops, <span class="hljs-keyword">out</span> of gumballs<br>You can&#x27;t insert a quarter, the machine is sold <span class="hljs-keyword">out</span><br>You turned, but there are <span class="hljs-keyword">no</span> gumballs<br><span class="hljs-keyword">No</span> gumball dispensed<br></code></pre></td></tr></table></figure><h2 id="9-策略（Strategy）"><a href="#9-策略（Strategy）" class="headerlink" title="9. 策略（Strategy）"></a>9. 策略（Strategy）</h2><h3 id="Intent-14"><a href="#Intent-14" class="headerlink" title="Intent"></a>Intent</h3><p>定义一系列算法，封装每个算法，并使它们可以互换。</p><p>策略模式可以让算法独立于使用它的客户端。</p><h3 id="Class-Diagram-14"><a href="#Class-Diagram-14" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Strategy 接口定义了一个算法族，它们都实现了 behavior() 方法。</li><li>Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_172.png" alt="img"></p><h3 id="与状态模式的比较"><a href="#与状态模式的比较" class="headerlink" title="与状态模式的比较"></a>与状态模式的比较</h3><p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p><p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p><h3 id="Implementation-14"><a href="#Implementation-14" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuackBehavior</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;quack!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Squeak</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;squeak!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">private</span> QuackBehavior quackBehavior;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performQuack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (quackBehavior != <span class="hljs-literal">null</span>) &#123;<br>            quackBehavior.quack();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuackBehavior</span><span class="hljs-params">(QuackBehavior quackBehavior)</span> &#123;<br>        <span class="hljs-built_in">this</span>.quackBehavior = quackBehavior;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Duck</span> <span class="hljs-variable">duck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duck</span>();<br>        duck.setQuackBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Squeak</span>());<br>        duck.performQuack();<br>        duck.setQuackBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quack</span>());<br>        duck.performQuack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">squeak!<br>quack!<br></code></pre></td></tr></table></figure><h3 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Comparator#compare()</li><li>javax.servlet.http.HttpServlet</li><li>javax.servlet.Filter#doFilter()</li></ul><h2 id="10-模板方法（Template-Method）"><a href="#10-模板方法（Template-Method）" class="headerlink" title="10. 模板方法（Template Method）"></a>10. 模板方法（Template Method）</h2><h3 id="Intent-15"><a href="#Intent-15" class="headerlink" title="Intent"></a>Intent</h3><p>定义算法框架，并将一些步骤的实现延迟到子类。</p><p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p><h3 id="Class-Diagram-15"><a href="#Class-Diagram-15" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_166.png" alt="img"></p><h3 id="Implementation-15"><a href="#Implementation-15" class="headerlink" title="Implementation"></a>Implementation</h3><p>冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_164.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareRecipe</span><span class="hljs-params">()</span> &#123;<br>        boilWater();<br>        brew();<br>        pourInCup();<br>        addCondiments();<br>    &#125;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">boilWater</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;boilWater&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;pourInCup&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Coffee.brew&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Coffee.addCondiments&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tea.brew&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tea.addCondiments&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CaffeineBeverage</span> <span class="hljs-variable">caffeineBeverage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();<br>        caffeineBeverage.prepareRecipe();<br>        System.out.println(<span class="hljs-string">&quot;-----------&quot;</span>);<br>        caffeineBeverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>();<br>        caffeineBeverage.prepareRecipe();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">boilWater<br>Coffee.brew<br>pourInCup<br><span class="hljs-section">Coffee.addCondiments</span><br><span class="hljs-section">-----------</span><br>boilWater<br>Tea.brew<br>pourInCup<br>Tea.addCondiments<br></code></pre></td></tr></table></figure><h3 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Collections#sort()</li><li>java.io.InputStream#skip()</li><li>java.io.InputStream#read()</li><li>java.util.AbstractList#indexOf()</li></ul><h2 id="11-访问者（Visitor）"><a href="#11-访问者（Visitor）" class="headerlink" title="11. 访问者（Visitor）"></a>11. 访问者（Visitor）</h2><h3 id="Intent-16"><a href="#Intent-16" class="headerlink" title="Intent"></a>Intent</h3><p>为一个对象结构（比如组合结构）增加新能力。</p><h3 id="Class-Diagram-16"><a href="#Class-Diagram-16" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作</li><li>ConcreteVisitor：具体访问者，存储遍历过程中的累计结果</li><li>ObjectStructure：对象结构，可以是组合结构，或者是一个集合。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_156.png" alt="img"></p><h3 id="Implementation-16"><a href="#Implementation-16" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerGroup</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Customer&gt; customers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Customer customer : customers) &#123;<br>            customer.accept(visitor);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCustomer</span><span class="hljs-params">(Customer customer)</span> &#123;<br>        customers.add(customer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Customer(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        orders.add(order);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>            order.accept(visitor);<br>        &#125;<br>    &#125;java<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Item&gt; items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    Order(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    Order(String name, String itemName) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(itemName));<br>    &#125;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(Item item)</span> &#123;<br>        items.add(item);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>            item.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    Item(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Customer customer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Order order)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Item item)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralReport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> customersNo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ordersNo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> itemsNo;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Customer customer)</span> &#123;<br>        System.out.println(customer.getName());<br>        customersNo++;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Order order)</span> &#123;<br>        System.out.println(order.getName());<br>        ordersNo++;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Item item)</span> &#123;<br>        System.out.println(item.getName());<br>        itemsNo++;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayResults</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Number of customers: &quot;</span> + customersNo);<br>        System.out.println(<span class="hljs-string">&quot;Number of orders:    &quot;</span> + ordersNo);<br>        System.out.println(<span class="hljs-string">&quot;Number of items:     &quot;</span> + itemsNo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;customer1&quot;</span>);<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order1&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order2&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order3&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order_a&quot;</span>);<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a1&quot;</span>));<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a2&quot;</span>));<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a3&quot;</span>));<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;customer2&quot;</span>);<br>        customer2.addOrder(order);<br>        <span class="hljs-type">CustomerGroup</span> <span class="hljs-variable">customers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerGroup</span>();<br>        customers.addCustomer(customer1);<br>        customers.addCustomer(customer2);<br>        <span class="hljs-type">GeneralReport</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralReport</span>();<br>        customers.accept(visitor);<br>        visitor.displayResults();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">customer1<br><span class="hljs-keyword">order1</span><br><span class="hljs-keyword"></span>item1<br><span class="hljs-keyword">order2</span><br><span class="hljs-keyword"></span>item1<br><span class="hljs-keyword">order3</span><br><span class="hljs-keyword"></span>item1<br>customer2<br><span class="hljs-keyword">order_a</span><br><span class="hljs-keyword"></span>item_a1<br>item_a2<br>item_a3<br>Number of customers: <span class="hljs-number">2</span><br>Number of <span class="hljs-keyword">orders: </span>   <span class="hljs-number">4</span><br>Number of items:     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="JDK-14"><a href="#JDK-14" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor</li><li>javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor</li></ul><h2 id="12-空对象（Null）"><a href="#12-空对象（Null）" class="headerlink" title="12. 空对象（Null）"></a>12. 空对象（Null）</h2><h3 id="Intent-17"><a href="#Intent-17" class="headerlink" title="Intent"></a>Intent</h3><p>使用什么都不做的空对象来代替 NULL。</p><p>一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。</p><h3 id="Class-Diagram-17"><a href="#Class-Diagram-17" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_161.png" alt="img"></p><h3 id="Implementation-17"><a href="#Implementation-17" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractOperation</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealOperation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOperation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;do something&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullOperation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOperation</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do nothing</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AbstractOperation</span> <span class="hljs-variable">abstractOperation</span> <span class="hljs-operator">=</span> func(-<span class="hljs-number">1</span>);<br>        abstractOperation.request();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractOperation <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> para)</span> &#123;<br>        <span class="hljs-keyword">if</span> (para &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullOperation</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealOperation</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、结构型"><a href="#四、结构型" class="headerlink" title="四、结构型"></a>四、结构型</h1><h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><h3 id="Intent-18"><a href="#Intent-18" class="headerlink" title="Intent"></a>Intent</h3><p>把一个类接口转换成另一个用户需要的接口。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_149.png" alt="img"></p><h3 id="Class-Diagram-18"><a href="#Class-Diagram-18" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_179.png" alt="img"></p><h3 id="Implementation-18"><a href="#Implementation-18" class="headerlink" title="Implementation"></a>Implementation</h3><p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p><p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WildTurkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;gobble!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurkeyAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Duck</span> &#123;<br>    Turkey turkey;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TurkeyAdapter</span><span class="hljs-params">(Turkey turkey)</span> &#123;<br>        <span class="hljs-built_in">this</span>.turkey = turkey;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        turkey.gobble();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Turkey</span> <span class="hljs-variable">turkey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WildTurkey</span>();<br>        <span class="hljs-type">Duck</span> <span class="hljs-variable">duck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TurkeyAdapter</span>(turkey);<br>        duck.quack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-15"><a href="#JDK-15" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList(T...)">java.util.Arrays#asList()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li></ul><h2 id="2-桥接（Bridge）"><a href="#2-桥接（Bridge）" class="headerlink" title="2. 桥接（Bridge）"></a>2. 桥接（Bridge）</h2><h3 id="Intent-19"><a href="#Intent-19" class="headerlink" title="Intent"></a>Intent</h3><p>将抽象与实现分离开来，使它们可以独立变化。</p><h3 id="Class-Diagram-19"><a href="#Class-Diagram-19" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Abstraction：定义抽象类的接口</li><li>Implementor：定义实现类接口</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_146.png" alt="img"></p><h3 id="Implementation-19"><a href="#Implementation-19" class="headerlink" title="Implementation"></a>Implementation</h3><p>RemoteControl 表示遥控器，指代 Abstraction。</p><p>TV 表示电视，指代 Implementor。</p><p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sony</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.on()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.off()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RCA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.on()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.off()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">protected</span> TV tv;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteControl</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl1</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl2</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl1</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RCA</span>());<br>        remoteControl1.on();<br>        remoteControl1.off();<br>        remoteControl1.tuneChannel();<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl2</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sony</span>());<br>         remoteControl2.on();<br>         remoteControl2.off();<br>         remoteControl2.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-16"><a href="#JDK-16" class="headerlink" title="JDK"></a>JDK</h3><ul><li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li><li>JDBC</li></ul><h2 id="3-组合（Composite）"><a href="#3-组合（Composite）" class="headerlink" title="3. 组合（Composite）"></a>3. 组合（Composite）</h2><h3 id="Intent-20"><a href="#Intent-20" class="headerlink" title="Intent"></a>Intent</h3><p>将对象组合成树形结构来表示“整体&#x2F;部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p><h3 id="Class-Diagram-20"><a href="#Class-Diagram-20" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</p><p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_147.png" alt="img"></p><h3 id="Implementation-20"><a href="#Implementation-20" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Component</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        print(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Component&gt; child;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Composite</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;--&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Composite:&quot;</span> + name);<br>        <span class="hljs-keyword">for</span> (Component component : child) &#123;<br>            component.print(level + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        child.add(component);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        child.remove(component);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;--&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;left:&quot;</span> + name);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(); <span class="hljs-comment">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        root.add(node1);<br>        root.add(node2);<br>        root.add(node3);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;21&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;22&quot;</span>);<br>        node2.add(node21);<br>        node2.add(node22);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node221</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;221&quot;</span>);<br>        node22.add(node221);<br>        root.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">Composite</span>:root<br><span class="hljs-literal">-</span>-left:1<br><span class="hljs-literal">-</span>-Composite:2<br><span class="hljs-literal">-</span>---left:21<br><span class="hljs-literal">-</span>---Composite:22<br><span class="hljs-literal">-</span>-----left:221<br><span class="hljs-literal">-</span>-left:3<br></code></pre></td></tr></table></figure><h3 id="JDK-17"><a href="#JDK-17" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.swing.JComponent#add(Component)</li><li>java.awt.Container#add(Component)</li><li>java.util.Map#putAll(Map)</li><li>java.util.List#addAll(Collection)</li><li>java.util.Set#addAll(Collection)</li></ul><h2 id="4-装饰（Decorator）"><a href="#4-装饰（Decorator）" class="headerlink" title="4. 装饰（Decorator）"></a>4. 装饰（Decorator）</h2><h3 id="Intent-21"><a href="#Intent-21" class="headerlink" title="Intent"></a>Intent</h3><p>为对象动态添加功能。</p><h3 id="Class-Diagram-21"><a href="#Class-Diagram-21" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_151.png" alt="img"></p><h3 id="Implementation-21"><a href="#Implementation-21" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p><p>下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。</p><p><img src="https://www.xuxueli.com/blog/static/images/img_169.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkRoast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseBlend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CondimentDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-keyword">protected</span> Beverage beverage;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Milk</span><span class="hljs-params">(Beverage beverage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + beverage.cost();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mocha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mocha</span><span class="hljs-params">(Beverage beverage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + beverage.cost();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">beverage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseBlend</span>();<br>        beverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mocha</span>(beverage);<br>        beverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(beverage);<br>        System.out.println(beverage.cost());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>类应该对扩展开放，对修改关闭：也就是添加新功能时不需要修改代码。饮料可以动态添加新的配料，而不需要去修改饮料的代码。</p><p>不可能把所有的类设计成都满足这一原则，应当把该原则应用于最有可能发生改变的地方。</p><h3 id="JDK-18"><a href="#JDK-18" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.BufferedInputStream(InputStream)</li><li>java.io.DataInputStream(InputStream)</li><li>java.io.BufferedOutputStream(OutputStream)</li><li>java.util.zip.ZipOutputStream(OutputStream)</li><li>java.util.Collections#checked<a href="https://www.xuxueli.com/blog/?blog=./notebook/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md">List|Map|Set|SortedSet|SortedMap</a></li></ul><h2 id="5-外观（Facade）"><a href="#5-外观（Facade）" class="headerlink" title="5. 外观（Facade）"></a>5. 外观（Facade）</h2><h3 id="Intent-22"><a href="#Intent-22" class="headerlink" title="Intent"></a>Intent</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p><h3 id="Class-Diagram-22"><a href="#Class-Diagram-22" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><img src="https://www.xuxueli.com/blog/static/images/img_178.png" alt="img"></p><h3 id="Implementation-22"><a href="#Implementation-22" class="headerlink" title="Implementation"></a>Implementation</h3><p>观看电影需要操作很多电器，使用外观模式实现一键看电影功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSystem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnTV</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;turnOnTV()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCD</span><span class="hljs-params">(String cd)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setCD( &quot;</span> + cd + <span class="hljs-string">&quot; )&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startWatching</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;startWatching()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SubSystem</span> <span class="hljs-variable">subSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystem</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchMovie</span><span class="hljs-params">()</span> &#123;<br>        subSystem.turnOnTV();<br>        subSystem.setCD(<span class="hljs-string">&quot;a movie&quot;</span>);<br>        subSystem.startWatching();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Facade</span> <span class="hljs-variable">facade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br>        facade.watchMovie();<br>    &#125;<br>&#125;<br><br>### <br></code></pre></td></tr></table></figure><p>设计原则</p><p>最少知识原则：只和你的密友谈话。也就是说客户对象所需要交互的对象应当尽可能少。</p><h2 id="6-享元（Flyweight）"><a href="#6-享元（Flyweight）" class="headerlink" title="6. 享元（Flyweight）"></a>6. 享元（Flyweight）</h2><h3 id="Intent-23"><a href="#Intent-23" class="headerlink" title="Intent"></a>Intent</h3><p>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</p><h3 id="Class-Diagram-23"><a href="#Class-Diagram-23" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Flyweight：享元对象</li><li>IntrinsicState：内部状态，享元对象共享内部状态</li><li>ExtrinsicState：外部状态，每个享元对象的外部状态不同</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_150.png" alt="img"></p><h3 id="Implementation-23"><a href="#Implementation-23" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(String extrinsicState)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFlyweight</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">private</span> String intrinsicState;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteFlyweight</span><span class="hljs-params">(String intrinsicState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.intrinsicState = intrinsicState;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(String extrinsicState)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Object address: &quot;</span> + System.identityHashCode(<span class="hljs-built_in">this</span>));<br>        System.out.println(<span class="hljs-string">&quot;IntrinsicState: &quot;</span> + intrinsicState);<br>        System.out.println(<span class="hljs-string">&quot;ExtrinsicState: &quot;</span> + extrinsicState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyweightFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Flyweight <span class="hljs-title function_">getFlyweight</span><span class="hljs-params">(String intrinsicState)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!flyweights.containsKey(intrinsicState)) &#123;<br>            <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFlyweight</span>(intrinsicState);<br>            flyweights.put(intrinsicState, flyweight);<br>        &#125;<br>        <span class="hljs-keyword">return</span> flyweights.get(intrinsicState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FlyweightFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlyweightFactory</span>();<br>        <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight1</span> <span class="hljs-operator">=</span> factory.getFlyweight(<span class="hljs-string">&quot;aa&quot;</span>);<br>        <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight2</span> <span class="hljs-operator">=</span> factory.getFlyweight(<span class="hljs-string">&quot;aa&quot;</span>);<br>        flyweight1.doOperation(<span class="hljs-string">&quot;x&quot;</span>);<br>        flyweight2.doOperation(<span class="hljs-string">&quot;y&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Object address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1163157884</span><br><span class="hljs-attribute">IntrinsicState</span><span class="hljs-punctuation">:</span> <span class="hljs-string">aa</span><br><span class="hljs-attribute">ExtrinsicState</span><span class="hljs-punctuation">:</span> <span class="hljs-string">x</span><br><span class="hljs-attribute">Object address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1163157884</span><br><span class="hljs-attribute">IntrinsicState</span><span class="hljs-punctuation">:</span> <span class="hljs-string">aa</span><br><span class="hljs-attribute">ExtrinsicState</span><span class="hljs-punctuation">:</span> <span class="hljs-string">y</span><br></code></pre></td></tr></table></figure><h3 id="JDK-19"><a href="#JDK-19" class="headerlink" title="JDK"></a>JDK</h3><p>Java 利用缓存来加速大量小对象的访问时间。</p><ul><li>java.lang.Integer#valueOf(int)</li><li>java.lang.Boolean#valueOf(boolean)</li><li>java.lang.Byte#valueOf(byte)</li><li>java.lang.Character#valueOf(char)</li></ul><h2 id="7-代理（Proxy）"><a href="#7-代理（Proxy）" class="headerlink" title="7. 代理（Proxy）"></a>7. 代理（Proxy）</h2><h3 id="Intent-24"><a href="#Intent-24" class="headerlink" title="Intent"></a>Intent</h3><p>控制对其它对象的访问。</p><h3 id="Class-Diagram-24"><a href="#Class-Diagram-24" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>代理有以下四类：</p><ul><li>远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul><p><img src="https://www.xuxueli.com/blog/static/images/img_153.png" alt="img"></p><h3 id="Implementation-24"><a href="#Implementation-24" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighResolutionImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> URL imageURL;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> startTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> width;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HighResolutionImage</span><span class="hljs-params">(URL imageURL)</span> &#123;<br>        <span class="hljs-built_in">this</span>.imageURL = imageURL;<br>        <span class="hljs-built_in">this</span>.startTime = System.currentTimeMillis();<br>        <span class="hljs-built_in">this</span>.width = <span class="hljs-number">600</span>;<br>        <span class="hljs-built_in">this</span>.height = <span class="hljs-number">600</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLoad</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 模拟图片加载，延迟 3s 加载完成</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> endTime - startTime &gt; <span class="hljs-number">3000</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Real Image: &quot;</span> + imageURL);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> HighResolutionImage highResolutionImage;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ImageProxy</span><span class="hljs-params">(HighResolutionImage highResolutionImage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.highResolutionImage = highResolutionImage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!highResolutionImage.isLoad()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Temp Image: &quot;</span> + highResolutionImage.getWidth() + <span class="hljs-string">&quot; &quot;</span> + highResolutionImage.getHeight());<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        highResolutionImage.showImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://image.jpg&quot;</span>;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(image);<br>        <span class="hljs-type">HighResolutionImage</span> <span class="hljs-variable">highResolutionImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighResolutionImage</span>(url);<br>        <span class="hljs-type">ImageProxy</span> <span class="hljs-variable">imageProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageProxy</span>(highResolutionImage);<br>        imageProxy.showImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-20"><a href="#JDK-20" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.lang.reflect.Proxy</li><li>RMI</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li>Gamma E. 设计模式: 可复用面向对象软件的基础 [M]. 机械工业出版社, 2007.</li><li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li><li><a href="http://www.oodesign.com/">Design Patterns</a></li><li><a href="http://java-design-patterns.com/">Design patterns implemented in Java</a></li><li><a href="http://www.programering.com/a/MTNxAzMwATY.html">The breakdown of design patterns in JDK</a></li></ul><p>转载：</p><p><a href="https://www.xuxueli.com/blog/?blog=./notebook/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md#JDK">设计模式 (xuxueli.com)</a></p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/06/hello-world/"/>
    <url>/2023/08/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git笔记</title>
    <link href="/2022/05/06/Git%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/06/Git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h1><ul><li>官方话：Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务。</li><li>简单来说就是用来管理团队开发的代码</li></ul><h1 id="为什么要学习Git"><a href="#为什么要学习Git" class="headerlink" title="为什么要学习Git"></a>为什么要学习Git</h1><ul><li>一句话说，你写代码要保存，就得用Git</li></ul><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><p><strong>这块是重要步骤，也是平时用的最多的命令。</strong></p><p><strong>一、本地仓库关联远程仓库（新建仓库）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment"># 初始化 git 仓库</span><br><br>git remote add origin 远程仓库链接地址 <span class="hljs-comment"># 将本地仓库和远程仓库关联</span><br><br>git push -u origin master <span class="hljs-comment">#本地编辑代码后提交至远程分支</span><br><br>PS: 第一次使用加上了 -u 参数，是推送内容并关联分支，之后推送直接使用git push即可，因为第一次已经将当前本地master分支和远程origin的master分支关联了<br><br>git push -u origin master <br>等同于<br>git push origin master //将当前分支提交到远程origin的master分支<br>加上<br>git branch --set-upstream-to=origin/master master//将远程仓库origin的master分支与本地仓库master分支关联<br></code></pre></td></tr></table></figure><p><strong>二、拉取远程分支到本地（已有远程仓库）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 远程仓库地址 <span class="hljs-comment"># 在本地下载远程仓库代码</span><br><br>git fetch origin 远程分支名 <span class="hljs-comment"># 将远程分支拉到本地</span><br><br>git checkout -b 本地分支名称 origin/远程分支名称 <span class="hljs-comment"># 本地关联远程分支，本地分支名可随意写</span><br><br>git pull origin <span class="hljs-comment"># 拉取远程分支代码</span><br></code></pre></td></tr></table></figure><blockquote><p>平时开发的话结合 IDEA 中的 Git 操作即可简单地完成提交（commit）和推送（push）操作。</p></blockquote><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16b9d385970c7b6ctplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><ul><li>本地仓库是对于远程仓库而言的。</li><li>本地仓库 &#x3D; 工作区 + 版本区</li><li>工作区即磁盘上的文件集合。</li><li>版本区(版本库)即<code>.git</code>文件</li><li>版本库 &#x3D; 暂存区(stage) + 分支(master) + 指针Head<ul><li>以我使用最频繁的git命令为例，即提交到github为例。</li><li><code>git init</code> 原本本地仓库只包含着工作区，这是最常见的工作状态。此时，<code>git init</code>一下，表示在本地区域创建了一个<code>.git</code>文件,版本区建立。</li><li><code>git add .</code> 表示把工作区的所有文件全部提交到版本区里面的<strong>暂存区</strong></li><li>当然你也可以通过 <code>git add ./xxx/</code> 一条一条分批添加到暂存区。</li><li><code>git commit -m &quot;xxx&quot;</code> 把暂存区的<strong>所有</strong>文件提交到仓库区，暂存区空空荡荡。</li><li><code>git remote add origin https://github.com/name/name_cangku.git</code> 把本地仓库与远程仓库连接起来。</li><li><code>git push -u origin master</code> 把仓库区的文件提交到远程仓库里。</li><li>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。会有这样的信息<code>nothing to commit, working tree clean</code></li></ul></li></ul><h1 id="版本的回溯与前进"><a href="#版本的回溯与前进" class="headerlink" title="版本的回溯与前进"></a>版本的回溯与前进</h1><p>提交一个文件，有时候我们会提交很多次，在提交历史中，这样就产生了不同的版本。每次提交，Git会把他们串成一条时间线。如何回溯到我们提交的上一个版本，用<code>git reset --hard + 版本号</code>即可。 版本号可以用<code>git log</code>来查看，每一次的版本都会产生不一样的版本号。回溯之后，<code>git log</code>查看一下发现离我们最近的那个版本已经不见了。但是我还想要前进到最近的版本应该如何？只要<code>git reset --hard + 版本号</code>就行。退一步来讲，虽然我们可以通过<code>git reset --hard + 版本号</code>,靠记住版本号来可以在不同的版本之间来回穿梭。<strong>但是</strong>,有时候把版本号弄丢了怎么办？<code>git reflog</code>帮你记录了每一次的命令，这样就可以找到版本号了，这样你又可以通过<code>git reset</code>来版本穿梭了。</p><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><ul><li>场景1：在工作区时，你修改了一个东西，你想撤销修改，<code>git checkout -- file</code>。廖雪峰老师指出撤销修改就回到和版本库一模一样的状态，即用版本库里的版本替换工作区的版本。</li><li>场景2：你修改了一个内容，并且已经<code>git add</code>到暂存区了。想撤销怎么办？回溯版本，<code>git reset --hard + 版本号</code>,再<code>git checkout -- file</code>,替换工作区的版本。</li><li>场景3：你修改了一个内容，并且已经<code>git commit</code>到了<code>master</code>。跟场景2一样，版本回溯，再进行撤销。</li></ul><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><ul><li>如果你<code>git add</code>一个文件到暂存区，然后在工作区又把文件删除了，Git会知道你删除了文件。如果你要把版本库里的文件删除，<code>git rm</code> 并且<code>git commit -m &quot;xxx&quot;</code>.</li><li>如果你误删了工作区的文件，怎么办？使用撤销命令，<code>git checkout --&lt;file&gt;</code>就可以。<strong>这再次证明了撤销命令其实就是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</strong></li></ul><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支，就像平行宇宙，廖雪峰老师如是说。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16b9e012079c4724tplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><p>在没有其他分支插进来时，只有一个master主分支。每次你<code>git push -u origin master</code> 提交就是增加一条时间轴，master也会跟着移动。</p><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16b9e11b1115072btplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><p>创建一个other的分支，通过other提交，虽然时间轴向前走了，但是主分支master还在原来的位置。</p><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16b9e1ce1d3c3b03tplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><p>理论分析完，看一下命令怎么写。</p><ul><li>创建分支<code>other</code>,切换到<code>other</code>分支。</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gml">复制代码git branch <span class="hljs-symbol">other</span><br>git checkout <span class="hljs-symbol">other</span><br></code></pre></td></tr></table></figure><ul><li>查看当前所有分支</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">复制代码git branch<br>markdown复制代码* other<br>  <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>当前的分支会有一个<code>*</code></p><ul><li>用<code>other</code>提交</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span>复制代码git <span class="hljs-keyword">add</span> .<span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span><br>git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m &quot;xxx&quot;<br></code></pre></td></tr></table></figure><ul><li><code>other</code>分支完成，切换回<code>master</code></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">复制代码git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><ul><li>此时，master分支上并没有<code>other</code>的文件，因为分支还没有合并。</li><li><strong>合并分支</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span><br>复制代码git <span class="hljs-keyword">merge</span> other<br></code></pre></td></tr></table></figure><ul><li>合并完成之后，就可以在master分支上查看到文件了。</li><li>删除<code>other</code>分支。</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">复制代码git branch -d <span class="hljs-symbol">other</span><br></code></pre></td></tr></table></figure><ul><li>我由此想到，在以后工作中，应该是一个开放小组共同开发一个项目，组长会创建很多分支，每一个分支可以交给一个人去开发某一个功能，一个小组共同开发而且不会相互干扰。谁的功能完成了，可以由组长合并一下完成了的分支。哦，完美！</li></ul><h2 id="解决合并分支问题"><a href="#解决合并分支问题" class="headerlink" title="解决合并分支问题"></a>解决合并分支问题</h2><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16ba102bd434afc6tplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><p>假如有这样一种情况，分支<code>other</code>已经<code>commit</code>了，<strong>但是</strong>此时指针指回<code>master</code>时，并且<code>master</code>没有合并，而是<code>git add / commit</code> 提交了。这样，就产生了冲突，主分支<code>master</code>文件内容与<code>other</code>分支的内容不一样。合并不起来！所以，</p><ul><li><p>修改文件的内容，让其保持一致。</p></li><li><p><code>git add</code> <code>git commit</code> 提交。</p></li><li><p>分支合并了。</p><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16ba11a0ba73803dtplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p></li><li><p><code>git log --graph</code> 查看分支合并图</p></li><li><p><code>git branch -d other</code> 删除分支，任务结束。</p></li></ul><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><ul><li><code>git merge --no-ff other</code> 禁用<code>Fast forward</code>模式，因为使用<code>Fast forward</code>模式，删除分支后，分支历史信息会丢失。</li></ul><h2 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h2><blockquote><p>廖雪峰老师提到，工作中每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。但如果你手上有分支在工作中，你的上级要你改另外的分支的BUG。你要把现在正在工作的分支保存下来，<code>git stash</code>,把当前工作现场“存储”起来，等以后恢复后继续工作。当你解决BUG后，<code>git checkout other</code>回到自己的分支。用<code>git stash list</code>查看你刚刚“存放”起来的工作去哪里了。此时你要恢复工作：</p></blockquote><ul><li><code>git stash apply</code>恢复却不删除<code>stash</code>内容，<code>git stash drop</code>删除<code>stash</code>内容。</li><li><code>git stash pop</code>恢复的同时把stash内容也删了.</li><li>此时，用<code>git stash list</code>查看，看不到任何<code>stash</code> 内容。<br><strong>总结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场</strong></li></ul><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><ul><li><code>git branch -d + 分支</code>有可能会删除失败，因为Git会保护没有被合并的分支。</li><li><code>git branch -D + 分支</code> 强行删除，丢弃没被合并的分支。</li></ul><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li><code>git remote</code> 查看远程库的信息，会显示<code>origin</code>，远程仓库默认名称为<code>origin</code></li><li><code>git remote -v</code>显示更详细的信息</li><li><code>git push -u origin master</code>推送<code>master</code>分支到<code>origin</code>远程仓库。</li><li><code>git push -u origin other</code> 推送<code>other</code>到<code>origin</code>远程仓库。</li></ul><h2 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h2><p>![img](C:\Users\86159\Documents\WeChat Files\wxid_1zzmt9geesyt22\FileStorage\File\2023-08\Git 笔记\16ba20c43f386f7ctplv-t2oaga2asx-zoom-in-crop-mark4536000.image)</p><p>产生上图的冲突时，</p><ul><li><p><code>git pull</code> 把最新的提交从远程仓库中抓取下来，在本地合并，解决冲突。在进行<code>git pull</code></p></li><li><p>如果</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><p> 也失败了，还要指定分支之间的链接，这一步Git会提醒你怎么做。然后再</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><p>。</p><blockquote><p><strong>廖雪峰老师的总结：多人协作的工作模式通常是这样：</strong></p></blockquote><ul><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code> 推送就能成功！</li><li>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</li></ul><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2></li><li><p><code>git rebase</code> 把分叉的提交历史“整理”成一条直线，看上去更直观.缺点是本地的分叉提交已经被修改过了。</p></li><li><p>最后在进行<code>git push -u origin master</code></p></li><li><p><code>rebase</code>的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p></li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><blockquote><p>比如一个APP要上线，通常在版本库中打一个标签(tag), 这样，就确定了打标签的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。<br><code>tag</code>其实就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。比如<code>tag v2.1</code>就是把历史上的一个版本的东西叫做<code>v2.1</code></p></blockquote><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>步骤：</p><ul><li><code>git branch</code>查看当前分支,<code>git checkout master</code>切换到<code>master</code>分支。</li><li><code>git tag &lt;name&gt;</code> 打标签，默认为<code>HEAD</code>。比如<code>git tag v1.0</code></li><li>默认标签是打在最新提交的<code>commit</code>上的。如果想要打标签在以前的<code>commit</code>上，要<code>git log</code>找到历史提交的<code>commit</code> id.</li><li>如果一个<code>commt id</code>是<code>du2n2d9</code>,执行<code>git tag v1.0 du2n2d9</code>就把这个版本打上了<code>v1.0</code>的标签了。</li><li><code>git tag</code> 查看所有标签，可以知道历史版本的<code>tag</code></li><li>标签不是按时间顺序列出，而是按字母排序的。</li><li><code>git show &lt;tagname&gt;</code> 查看标签信息。</li><li><code>git tag -a &lt;标签名&gt; -m &quot;&lt;说明&gt;&quot;</code>,创建带说明的标签。 <code>-a</code>指定标签名，<code>-m</code>指定说明文字。用<code>show</code>可以查看说明。</li></ul><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><ul><li><code>git tag -d v1.0</code> 删除标签。因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</li><li><code>git push origin &lt;tagname&gt;</code> 推送某个标签到远程</li><li><code>git push origin --tags</code> 一次性推送全部尚未推送到远程的本地标签</li><li>如果标签推送到远程。<code>git tag -d v1.0</code> 先删除本地标签v1.0。<code>git push origin :refs/tags/v1.0</code>删除远程标签v1.0</li></ul><h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><ul><li><p><code>git config --global color.ui true</code>让Git显示颜色，会让命令输出看起来更醒目</p></li><li><p>忽略特殊文件 创建一个<code>.gitignore</code>文件，把需要忽略的文件名填进去。Git就会自动忽略这些文件。我也在学习中遇到过这样的问题，比如<code>node_modules</code>文件就可以忽略。</p></li><li><blockquote><p>忽略文件原则：忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</p></blockquote></li><li><p>强制提交已忽略的的文件。<code>git add -f &lt;file&gt;</code></p></li><li><p><code>git check-ignore -v &lt;file&gt;</code>检查为什么Git会忽略该文件。</p></li><li><p><strong>给Git命令配别名</strong>,这个有点骚，就是你以后想输入<code>git rebase</code>时,你给它一个“外号”，就叫它<code>git nb</code>。以后你可以通过<code>git nb</code>来代替<code>git rebase</code>。具体怎么转换可以去<a href="https://link.juejin.cn/?target=https://www.liaoxuefeng.com/wiki/896043488029600/898732837407424">廖雪峰老师的网站</a>看。因为水平有限，我觉得先把正常的Git命令搞清楚来就很不错了。</p></li></ul><h1 id="常用Git命令总结"><a href="#常用Git命令总结" class="headerlink" title="常用Git命令总结"></a>常用Git命令总结</h1><ul><li><code>git config --global user.name &quot;你的名字&quot;</code> 让你全部的<code>Git</code>仓库绑定你的名字</li><li><code>git config --global user.email &quot;你的邮箱&quot;</code> 让你全部的<code>Git</code>仓库绑定你的邮箱</li><li><code>git init</code> 初始化你的仓库</li><li><code>git add .</code> 把工作区的文件全部提交到暂存区</li><li><code>git add ./&lt;file&gt;/</code> 把工作区的<code>&lt;file&gt;</code>文件提交到暂存区</li><li><code>git commit -m &quot;xxx&quot;</code> 把暂存区的所有文件提交到仓库区，<strong>暂存区空空荡荡</strong></li><li><code>git remote add origin https://github.com/name/name_cangku.git</code> 把本地仓库与远程仓库连接起来</li><li><code>git push -u origin master</code> 把仓库区的主分支<code>master</code>提交到远程仓库里</li><li><code>git push -u origin &lt;其他分支&gt;</code> 把其他分支提交到远程仓库</li><li><code>git status</code>查看当前仓库的状态</li><li><code>git diff</code> 查看文件修改的具体内容</li><li><code>git log</code> 显示从最近到最远的提交历史</li><li><code>git clone + 仓库地址</code>下载克隆文件</li><li><code>git reset --hard + 版本号</code> 回溯版本，版本号在<code>commit</code>的时候与<code>master</code>跟随在一起</li><li><code>git reflog</code> 显示命令历史</li><li><code>git checkout -- &lt;file&gt;</code> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是<code>Git</code>世界的<code>ctrl + z</code></li><li><code>git rm</code> 删除版本库的文件</li><li><code>git branch</code> 查看当前所有分支</li><li><code>git branch &lt;分支名字&gt;</code> 创建分支</li><li><code>git checkout &lt;分支名字&gt;</code> 切换到分支</li><li><code>git merge &lt;分支名字&gt;</code> 合并分支</li><li><code>git branch -d &lt;分支名字&gt;</code> 删除分支,有可能会删除失败，因为<code>Git</code>会保护没有被合并的分支</li><li><code>git branch -D + &lt;分支名字&gt;</code> 强行删除，丢弃没被合并的分支</li><li><code>git log --graph</code> 查看分支合并图</li><li><code>git merge --no-ff &lt;分支名字&gt;</code> 合并分支的时候禁用<code>Fast forward</code>模式,因为这个模式会丢失分支历史信息</li><li><code>git stash</code> 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作</li><li><code>git stash list</code> 查看你刚刚“存放”起来的工作去哪里了</li><li><code>git stash apply</code> 恢复却不删除<code>stash</code>内容</li><li><code>git stash drop</code> 删除<code>stash</code>内容</li><li><code>git stash pop</code> 恢复的同时把stash内容也删了</li><li><code>git remote</code> 查看远程库的信息，会显示<code>origin</code>，远程仓库默认名称为<code>origin</code></li><li><code>git remote -v</code> 显示更详细的信息</li><li><code>git pull</code> 把最新的提交从远程仓库中抓取下来，在本地合并,和<code>git push</code>相反</li><li><code>git rebase</code> 把分叉的提交历史“整理”成一条直线，看上去更直观</li><li><code>git tag</code> 查看所有标签，可以知道历史版本的tag</li><li><code>git tag &lt;name&gt;</code> 打标签，默认为<code>HEAD</code>。比如<code>git tag v1.0</code></li><li><code>git tag &lt;tagName&gt; &lt;版本号&gt;</code> 把版本号打上标签，版本号就是<code>commit</code>时，跟在旁边的一串字母数字</li><li><code>git show &lt;tagName&gt;</code> 查看标签信息</li><li><code>git tag -a &lt;tagName&gt; -m &quot;&lt;说明&gt;&quot;</code> 创建带说明的标签。 <code>-a</code>指定标签名，<code>-m</code>指定说明文字</li><li><code>git tag -d &lt;tagName&gt;</code> 删除标签</li><li><code>git push origin &lt;tagname&gt;</code> 推送某个标签到远程</li><li><code>git push origin --tags</code> 一次性推送全部尚未推送到远程的本地标签</li><li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 删除远程标签<code>&lt;tagname&gt;</code></li><li><code>git config --global color.ui true</code> 让Git显示颜色，会让命令输出看起来更醒目</li><li><code>git add -f &lt;file&gt;</code> 强制提交已忽略的的文件</li><li><code>git check-ignore -v &lt;file&gt;</code> 检查为什么Git会忽略该文件</li></ul><p>参考：<a href="https://juejin.cn/post/6844903877138087950">Git 笔记 - 程序员都要掌握的 Git</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaweb基础学习</title>
    <link href="/2022/03/12/javaweb%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/12/javaweb%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、WEB应用程序"><a href="#一、WEB应用程序" class="headerlink" title="一、WEB应用程序"></a>一、WEB应用程序</h1><p>B&#x2F;S ( browser&#x2F;server ，浏览器&#x2F;服务器）架构</p><p>基于HTTP传输协议（超文本传输协议，回忆HTML的名字：超文本标记语言）</p><p>WEB程序必须要运行在web容器上，如Tomcat &#x2F;Jboss&#x2F;WebLogic等</p><h1 id="二、HTTP协议"><a href="#二、HTTP协议" class="headerlink" title="二、HTTP协议"></a>二、HTTP协议</h1><p>HTTP使用TCP作为它的支撑运输层协议，默认的端口是80（缺省端口）。</p><p>超文本传输协议(Hypertext Transfer Protocol，简称HTTP)是应用层协议。HTTP 是一种请求&#x2F;响应式的协议，即一个客户端与服务器建立连接后，向服务器发送一个请求;服务器接到请求后，给予相应的响应信息。　</p><p>HTTP 请求报文HTTP 请求报文由请求行、请求头部、空行 和 请求包体 4 个部分组成</p><p>HTTP 请求报文由请求行、请求头部、空行 和 请求包体 4 个部分组成下面对请求报文格式进行简单的分析：</p><p>请求行：请求行由方法字段、URL 字段 和HTTP 协议版本字段 3 个部分组成，他们之间使用空格隔开。常用的 HTTP 请求方法有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT;</p><p>GET：当客户端要从服务器中读取某个资源时，使用GET 方法。GET 方法要求服务器将URL 定位的资源放在响应报文的数据部分，回送给客户端，即向服务器请求某个资源。使用GET 方法时，请求参数和对应的值附加在 URL 后面，利用一个问号(“?”)代表URL 的结尾与请求参数的开始，传递参数长度受限制。例如，&#x2F;index.jsp?id&#x3D;100&amp;op&#x3D;bind。</p><p>POST：当客户端给服务器提供信息较多时可以使用POST 方法，POST 方法向服务器提交数据，比如完成表单数据的提交，将数据提交给服务器处理。GET 一般用于获取&#x2F;查询资源信息，POST 会附带用户数据，一般用于更新资源信息。POST 方法将请求参数封装在HTTP 请求数据中，以名称&#x2F;值的形式出现，可以传输大量数据;请求头部：请求头部由关键字&#x2F;值对组成，每行一对，关键字和值用英文冒号“:”分隔。</p><p>请求头部通知服务器有关于客户端请求的信息，典型的请求头有：</p><p>User-Agent：产生请求的浏览器类型;</p><p>Accept：客户端可识别的响应内容类型列表;星号 “ * ” 用于按范围将类型分组，用 “ <em>&#x2F;</em> ” 指示可接受全部类型，用“ type&#x2F;* ”指示可接受 type 类型的所有子类型;</p><p>Accept-Language：客户端可接受的自然语言;</p><p>Accept-Encoding：客户端可接受的编码压缩格式;</p><p>Accept-Charset：可接受的应答的字符集;</p><p>Host：请求的主机名，允许多个域名同处一个IP 地址，即虚拟主机;</p><p>connection：连接方式(close 或 keepalive);</p><p>Cookie：存储于客户端扩展字段，向同一域名的服务端发送属于该域的cookie;</p><p>空行：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头;</p><p>请求包体：请求包体不在 GET 方法中使用，而是在POST 方法中使用。POST 方法适用于需要客户填写表单的场合。与请求包体相关的最常使用的是包体类型 Content-Type 和包体长度 Content-Length。</p><p>HTTP 响应报文HTTP 响应报文由状态行、响应头部、空行 和 响应包体 4 个部分组成</p><p>下面对响应报文格式进行简单的分析：</p><p>状态行：状态行由 HTTP 协议版本字段、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开; 状态码由三位数字组成，第一位数字表示响应的类型，常用的状态码有五大类如下所示：</p><p>1xx：表示服务器已接收了客户端请求，客户端可继续发送请求;</p><p>2xx：表示服务器已成功接收到请求并进行处理;</p><p>3xx：表示服务器要求客户端重定向;</p><p>4xx：表示客户端的请求有非法内容;　</p><p>5xx：表示服务器未能正常处理客户端的请求而出现意外错误;</p><p>状态码描述文本有如下取值：</p><p>200 OK：表示客户端请求成功;　</p><p>400 Bad Request：表示客户端请求有语法错误，不能被服务器所理解;　</p><p>401 Unauthonzed：表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用;</p><p>403 Forbidden：表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因;　</p><p>404 Not Found：请求的资源不存在，例如，输入了错误的URL;　</p><p>500 Internal Server Error：表示服务器发生不可预期的错误，导致无法完成客户端的请求;　</p><p>503 Service Unavailable：表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常;</p><h1 id="三、Servlet"><a href="#三、Servlet" class="headerlink" title="三、Servlet"></a>三、Servlet</h1><p>Servlet是javaWEB的核心，简单的说就是用Java编写的服务器端程序。用户进行一个动态请求（静态请求就是直接请求HTML )时，实际上是请求—个servlet</p><p>WEB容器将Servlet加载到内存 通过init方法进行初始化</p><p>Service()方法根据请求方法调用对应的处理方法doPost()或doGet()，还有一些其他的请求方法doPut() doOptions()…但这些方法不常用，并且从安全的角度都是建议屏蔽的。</p><p>当Server不再需要Servlet时（一般当Server关闭时），Server调用 Servlet 的 destroy() 方法。</p><h1 id="四、JSP"><a href="#四、JSP" class="headerlink" title="四、JSP"></a>四、JSP</h1><p>Java Server Pages是一种静态编码町机和动态编码Java混合的技术， 也有说法就是将java代码镶嵌在HTML上，在JSP之前，Servlet作为主体，功能比较强大，设计也很先进，但瑜出 HTML页面却完全是Java的out.print()， 一行一句的输出，对于页面编写和修改来说非常不方便，这才促使SUN公司推出JSP。JSP和ASP、PHP类似都是镶嵌型语言。另外补充一下，WEB容器后动的时候，会将_JSP编译成Servlet，也有说法JSP是Servlet的升级版。</p><h1 id="五、Tomcat"><a href="#五、Tomcat" class="headerlink" title="五、Tomcat"></a>五、Tomcat</h1><p>Java WEB容器有很多，这里以Tomcat为例来说。前面说到，WEB程序必须运行在WEB容器上。Tomcat就是作为WEB容器来运行切Java WEB程序的。Tomcat是JAVA语言写的，需要JVM作为运行环境。</p><p>Tomcat的目录结构</p><p>bin………………………………可执行程序（脚本），启动停止调试Tomcat的一些bat.sh</p><p>conf…………………………….配置文件 webx.ml server.xml 等</p><p>lib……………………………….Tomcat运行需要的jar包</p><p>logs…………………………….曰志文件</p><p>temp…………………………….临时文件</p><p>webapps………………………WEB 程序(编译后的项目文件)</p><p>work…………………………….将jsp文件生成java文件在此目录进行</p><p>补充说明一下，Tomcat将jsp编译成Java文件并不是实时进行的，所以有时候修改了页面，并没有及时生效，这时候我们只需要删除一下work目录下对应的文件即可。</p><h1 id="六、Java-WEB项目结构"><a href="#六、Java-WEB项目结构" class="headerlink" title="六、Java WEB项目结构"></a>六、Java WEB项目结构</h1><p>一般来说，我们常说的Java项目基本上都是WEB项目（B&#x2F;S架构），不是说Java不能做C&#x2F;S程序，实际上Java的Swing就是画界面的，但是现在C#已经成为画界面最流行的语言，快速，简单，所以越来越少的人用Java来做C&#x2F;S程序开发了。我们主要来说Java WEB项目，下面是最基本的项目结构。</p><p>src…………………………….JAVA源码，java文件目录</p><p>webContent&#x2F;webRoot……………项目发布目录</p><p>WEB-INF</p><p>lib………………………………….项目需要的jar包</p><p>web.xml…………………………WEB 程序的入口</p><p>以上是Java WEB项目的核心结构，实际开发中，搭建项目会比这些复杂，特别是引用框架以后，配置文件的增加，会添加一些新的目录。</p><h1 id="七、开发框架"><a href="#七、开发框架" class="headerlink" title="七、开发框架"></a>七、开发框架</h1><p>前面提到客户端发起动态请求时，请求到Servlet进行处理，然后返回，整个请求处理的工作都是在Servlet中处理的，看起来比较简单，每当需要一个不同的请求就写一个Servlet，但实际开发的时候如果功能模块比较多，就需要写很多个Servlet，并且如果我们想修改一个请求的返回，也必须通过修改Java代码 (Servlet)的方式来实现。</p><p>这样对功能的扩展和维护来说，就比较麻烦了，所以也就推动了很多集成幵发框架的流行，比如Webwork，Struts，SpringMVC，Jfinal等都是主流的Java WEB开发框架。</p><p>使用框架有一个很笼统的优点概述，可以加快开发进程，在类似项目中重用代码将为开发者节省大量的时间和精力.框架为执行繁琐的代码任务提供预建模块。让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题。但如果想要深入的了解一个框架，使用的更加熟练，还是需要了解底层的原理，找到其源头也就是Servlet。</p><p>以SpringMVC为例简单描述一下工作原理</p><p>SprfngMVC主要也是通过DispatcherServlet (Servlet调配器，在web_xml中配置）实现了Servlet这个接口，又叫前端控制器，来自前端的请求会先到达这里，它负责到后台去匹配合适的handler。DispatcherServlet的主要工作流程如下：</p><p>1、 客户端发出http请求给web服务器，web服务器对http请求进行解析，如果匹配DispatcherServlet的请求映射路径（在web.xml中指定），web容器将请求转交给DispatcherServlet.</p><p>2、 DipatcherServlet接收到这个请求之后将根据请求的信息（包括URL、Http方法、请求报文头和请求参数Cookie等）以及HandlerMapping的配置找到处理请求的处理器Controller (Handler)。</p><p>3、 DispatclierServlet 根据 HandlerMapping 找到对应的Handler，将处理权交给Handler ( Handler将具体的处理进行封装），再由具体的 HandlerAdapter对Handler进行具体的调用。</p><p>5、Handler对数据处理完成以后将返回一个ModeAndView对象给DispatcherServlet.</p><p>6、 Handler返回的ModelAndView只是一个逻辑视图并不是一个正式的视图，Di spatcherSevlet通过ViewResolver将邀辑视图转化为真正的视图view(这句话简单的就是返回一个要返回的页面的相对路径，通过试图解析器转换成具体那个页面)。</p><p>7、 Dispatcher通过model解析出ModeAndView中的参数进行解析最终展现出完整的view并返回给客户端。</p><h1 id="八、用SpringMVC编写功能模块"><a href="#八、用SpringMVC编写功能模块" class="headerlink" title="八、用SpringMVC编写功能模块"></a>八、用SpringMVC编写功能模块</h1><p>由于框架配置工作量比较大，也需要对各方面的技术有所了解，暂时不做描述。我们简单的说一下实际开发中，如何在现有的框架基础上完成一个功能模块，了解功能的基本流程，以登录为例：</p><p>1、首先要有登录入口（ JSP页面），在SpringMVC框架中我们不建议直接 访问JSP页面，所以我们登录页面的访问也是通过后台处理的；</p><p>2、编写丨ogin.jsp页面及登录返回页面index.jsp ;</p><p>3、编写LoginController，里面包含两个请求控制方法，一个preLogin()，一个doLogin() ，其中preLogin()负责处理请求登录页面的请求（返回到 login.jsp )， doLogin()处理登录请求返回到index.jsp。</p><p>\4. login.jsp中需要通过表单或者ajax进行登录请求。</p><p>请求&#x2F;preLogin业务逻辑处理返回到login.jsp à 输入用户名、密码…</p><p>请求&#x2F;doLogin业务逻辑处理，返回登录结果index.jsp。</p><h1 id="九、其他基础知识"><a href="#九、其他基础知识" class="headerlink" title="九、其他基础知识"></a>九、其他基础知识</h1><p>数据库操作，Jdbc&#x2F;Hibernate&#x2F;Mybatis</p><p>JSP标签，EL表达式，Struts标签，C标签等</p><p>基本的前端技术CSS&#x2F;JS&#x2F;jQuery&#x2F;Ajax</p>]]></content>
    
    
    
    <tags>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html,css,js前端学习笔记</title>
    <link href="/2021/03/07/html-css-js%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/07/html-css-js%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p><strong>HTMl学习总结</strong></p><p>从开始的零基础，我开始学习了HTML，一开始我以为的HTML和我学习到结束的有些不太一样，html是一种超文本语言，这是前端技术，旨在做出网页给前端显示用。在学习的过程中我遇到了大大小小的问题其中有一些我需要罗列出来。</p><p>例如 网页图片的路径问题和HTML脚本的问题这涉及到后面的学习内容，在前面我只是简单的了解到这个知识，其中我认为比较有趣的是HTML的插件元素，HTML中最重要的结束标签了以下是常用的标签</p><ul><li>块级标签：<div> <h> <ul> <li> <p> <form>　　占满一行,可以设置宽，高</li><li>行级标签：<span> <a>　　只占用自己的大小，不可以设置宽，高。</li><li>行内块标签：<img> <input> 　　只占用自己的大小，但可以设置宽，高。</li><li>换行标签：</li><li>空格：$nbsp</li></ul><h3 id="HTML-元素语法"><a href="#HTML-元素语法" class="headerlink" title="HTML 元素语法"></a>HTML 元素语法</h3><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li>元素的内容**是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有*<em>空内容（empty content）</em></li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li></ul><p>大多数 HTML 元素可拥有<strong>属性</strong></p><ul><li>一个元素可以设置它的属性 例如<a>链接</li></ul><p><a href="http://www.runoob.com">这是一个链接</a></p><h3 id="HTML-css"><a href="#HTML-css" class="headerlink" title="HTML css"></a>HTML css</h3><p>CSS 是在 HTML 4 开始使用的,是为了更好的渲染HTML元素而引入的.</p><p>CSS 可以通过以下方式添加到HTML中:</p><p><em>内联样式- 在HTML元素中使用”style”</em>* 属性***</p><p><em>内部样式表 -在HTML文档头部 区域使用</em>* 元素** 来包含CSS*</p><p><em>外部引用 - 使用外部 CSS</em>* 文件***</p><p><strong>在之后的学习中我会深入的学习css，这里不做详细总结</strong>*</p><p><strong>##HTML 图像- 图像标签（ <img>）和源属性（Src）</strong>*</p><p>在 HTML 中，图像由<img> 标签定义。</p><p><img> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。</p><p>代码格式：<br> <code>&lt;img src=&quot;pulpit.jpg&quot; alt=&quot;Pulpit rock&quot; width=&quot;304&quot; height=&quot;228&quot;&gt;</code><br> 注意src路径问题</p><h3 id="区块-元素"><a href="#区块-元素" class="headerlink" title="区块 元素"></a>区块 <div>元素</h3><p>我认为最重要的是  <div> 元素，<div>是块级元素，它可用于组合其他 HTML 元素的容器。</p><div> 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。<p>如果与 CSS 一同使用，<div> 元素可用于对大的内容块设置样式属性。</p><div> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <table> 元素进行文档布局不是表格的正确用法。<table> 元素的作用是显示表格化的数据。<p>在写的网页使用 <div> 元素来组合块级元素，这样就可以使用样式对它们进行格式化。</p><p>例如我写的网页的一部分：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;copyright&quot;</span>&gt;<br><br>    &lt;!-- container --&gt;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copyright-left wow fadeInLeft animated&quot;</span> <span class="hljs-attr">data-wow-delay</span>=<span class="hljs-string">&quot;0.4s&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;visibility: visible; -webkit-animation-delay: 0.4s;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>版权所有 &amp;制作时间:2020.澳门巴士网<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copyright-right wow fadeInRight animated&quot;</span> <span class="hljs-attr">data-wow-delay</span>=<span class="hljs-string">&quot;0.4s&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;visibility: visible; -webkit-animation-delay: 0.4s;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter facebook&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter chrome&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter pinterest&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter linkedin&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;twitter dribbble&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                                $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                                    $().<span class="hljs-title class_">UItoTop</span>(&#123; <span class="hljs-attr">easingType</span>: <span class="hljs-string">&#x27;easeOutQuart&#x27;</span> &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                                &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                            </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#home&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toTop&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scroll&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toTopHover&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;opacity: 1;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    &lt;!-- <span class="hljs-comment">//container --&gt;</span><br><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="HTML的输入"><a href="#HTML的输入" class="headerlink" title="HTML的输入"></a>HTML的输入</h3><p>表单使用表单标签 <form> 来设置:</p><p>文本域（Text Fields）</p><p>文本域通过<input type="text"> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><p>如代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;90&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>用户名:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;130&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;15&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;90&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>密<span class="hljs-symbol">&amp;nbsp;</span>码:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;130&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;15&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HTML脚本"><a href="#HTML脚本" class="headerlink" title="HTML脚本"></a>HTML脚本</h3><p>用<script>标签插入脚本，在之后的Javascript中会再次学习</p><p><noscript> 定义了不支持脚本浏览器输出的文本。</p><p>整体的HTML学习在我看来HTML就是很多的标签构成的，而且在学习的过程中也比较轻松，以为一些比叫常用的标签 如超链接和段落以及其他的一些标签必须要记住但是很多只是有印象就可以了遇到相应的问题在去翻资料去查阅。</p><h1 id="CSS学习总结"><a href="#CSS学习总结" class="headerlink" title="CSS学习总结"></a><strong>CSS学习总结</strong></h1><p>前言：我开始还是了解一些HTML的内容的但是在CSS上我可谓是完全小白，在学习后，可以简单概况下 CSS 计算将HTML如何在屏幕上显示下功夫，HTML在前面已经终结上了，HTML中是由大量的元素组成的，这些元素都可以通过CSS来美化。</p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>一个页面上的元素众多，选择器就用于在页面中找到/选择需要应用这个样式的对象。其中最多使用的是class选择器。</p><p>还有的就是Id选择器：</p><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ip&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org&quot;</span>&gt;</span>橘色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>class选择器：</p><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p><p>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点"."号显示：</p><p>在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p><h3 id="内部表，外部表，内联样式"><a href="#内部表，外部表，内联样式" class="headerlink" title="内部表，外部表，内联样式"></a>内部表，外部表，内联样式</h3><p><em>外部表：</em></p><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。</p><p><em>内部表：</em></p><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表，就像这样</p><p><em>内联样式</em></p><p>在之前已经普遍使用，由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><p><em>多重样式的优先级</em></p><p>内联样式）Inline style > （内部样式）Internal style sheet >（外部样式）External style sheet > 浏览器默认样式</p><h3 id="css链接"><a href="#css链接" class="headerlink" title="css链接"></a>css链接</h3><p>链接的四个状态分别是</p><p>a:link - 正常，未访问过的链接</p><p>a:visited - 用户已访问过的链接</p><p>a:hover - 当用户鼠标放在链接上时</p><p>a:active - 链接被点击的那一刻</p><p>这几个状态可以对应不同的css样式</p><p>a:link {color:#000000;} /* 未访问链接*/</p><p>a:visited {color:#00FF00;} /* 已访问链接 */</p><p>a:hover {color:#FF00FF;} /* 鼠标移动到链接上 */</p><p>a:active {color:#0000FF;} /* 鼠标点击时 */</p><p>通过这个进行设置</p><h3 id="css盒子模型："><a href="#css盒子模型：" class="headerlink" title="css盒子模型："></a>css盒子模型：</h3><p><img src="https://upload-images.jianshu.io/upload_images/23370499-0de0bb8bb46762d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/664/format/webp" alt="img"></p><p>image</p><p>不同部分的说明：</p><p><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。*</p><p><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。*</p><p><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。*</p><p><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。*</p><h2 id="cssoutline-轮廓-margi-外边距"><a href="#cssoutline-轮廓-margi-外边距" class="headerlink" title="cssoutline(轮廓)&margi(外边距)"></a>cssoutline(轮廓)&margi(外边距)</h2><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><p>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</p><p>margin 清除周围的（外边框）元素区域。margin 没有背景颜色，是完全透明的。</p><p>margin 可以单独改变元素的上，下，左，右边距，也可以一次改变所有的属性。</p><p>通过标签的.margin 可以设置外边框例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.margin</span><br><br>&#123;<br><br><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">100px</span>;<br><br><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">100px</span>;<br><br><span class="hljs-attribute">margin-right</span>:<span class="hljs-number">50px</span>;<br><br><span class="hljs-attribute">margin-left</span>:<span class="hljs-number">50px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/23370499-94c742f874c546f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/942/format/webp" alt="img"></p><p>image</p><h3 id="css显示与可见性"><a href="#css显示与可见性" class="headerlink" title="css显示与可见性"></a>css显示与可见性</h3><p>隐藏一个元素可以通过把display属性设置为"none"，或把visibility属性设置为"hidden"。但是请注意，这两种方法会产生不同的结果。</p><p>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p><h3 id="css浮动"><a href="#css浮动" class="headerlink" title="css浮动"></a>css浮动</h3><p>针对于图像时，它在布局时一样非常有用。</p><p>右浮动，文字流将环绕在它的左边。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123; <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;&#125;<br></code></pre></td></tr></table></figure><p>彼此相邻的浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.thumbnail</span> &#123; <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br><br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">110px</span>;<br><br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">90px</span>;<br><br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">5px</span>;&#125;<br></code></pre></td></tr></table></figure><p>清除浮动用clear</p><h2 id="css字体速记规则"><a href="#css字体速记规则" class="headerlink" title="css字体速记规则"></a>css字体速记规则</h2><p>当用css定义字体样式的时候，你也许会这样做：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-weight</span>:bold;<span class="hljs-attribute">font-style</span>:italic;<span class="hljs-attribute">font-variant</span>:small-caps;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">1em</span>;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">1.5em</span>;<span class="hljs-attribute">font-family</span>:verdana,sans-serif<br></code></pre></td></tr></table></figure><p>没有必要这么做，因为你可以使用css速记属性：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">font</span>:bold italic small-caps <span class="hljs-number">1</span>em/<span class="hljs-number">1</span>.<span class="hljs-number">5</span>em verdana,sans-serif<br></code></pre></td></tr></table></figure><p>值得注意的是：css速记版本只会在你同时指定font-size和font-family属性时才会生效。如果你没有指定font-weight,font-style,或者font-variant，那么这些值将会自动默认为normal</p><h3 id="行内元素、块元素和空元素"><a href="#行内元素、块元素和空元素" class="headerlink" title="行内元素、块元素和空元素"></a>行内元素、块元素和空元素</h3><p>行内元素特点</p><p>1、和其他元素都在一行上；</p><p>2、元素的高度、宽度、行高及顶部和底部边距不可设置；</p><p>3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p><p>行内元素在设置 水平方向的padding-left、padding-right、margin-left、margin-right都产生边距效果，但竖直方向的padding-top、padding-bottom、margin-top、margin-bottom却不会产生边距效果。</p><p>块级元素特点</p><p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）2、元素的高度、宽度、行高以及顶和底边距都可设置。3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</p><p>在html中，<span>、<a>、<label>、<input>、 <img>、 <strong>和<em>就是典型的行内元素（inline）元素。</p><p>块级元素是可以设置宽高的，但是它的实际宽高是本身宽高+padding。block元素要单独占一行。内联元素不单独占一行，给他设置宽高是没有用的。</p><p>所有浏览器下的CSS透明度</p><p>元素透明度时常是个恼人的问题，下面这种方式可以实现所有浏览器下的透明度设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.transparent</span>&#123;zoom:<span class="hljs-number">1</span>;<span class="hljs-attribute">filter</span>:<span class="hljs-built_in">alpha</span>(opacity=<span class="hljs-number">50</span>);<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.5</span>;&#125;<br></code></pre></td></tr></table></figure><p>Zoom属性是IE浏览器的专有属性，Firefox等浏览器不支持。它可以设置或检索对象的缩放比例。除此之外，它还有其他一些小作用，比如触发IE的hasLayout属性，清除浮动、清除margin的重叠等。</p><p>当一个元素的hasLayout属性值为true时，我们说这个元素有一个布局（layout）</p><h3 id="CSS媒体类型"><a href="#CSS媒体类型" class="headerlink" title="CSS媒体类型"></a>CSS媒体类型</h3><p>@media 规则允许在相同样式表为不同媒体设置不同的样式。</p><p>在下面的例子告诉我们浏览器屏幕上显示一个 14 像素的 Verdana 字体样式。但是如果页面打印，将是 10 个像素的 Times 字体。请注意，font-weight 在屏幕上和纸上设置为粗体</p><p>其他媒体类型</p><p><img src="https://upload-images.jianshu.io/upload_images/23370499-da5744cea95a6cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/928/format/webp" alt="img"></p><p>image</p><h1 id="javascript学习总结"><a href="#javascript学习总结" class="headerlink" title="javascript学习总结"></a>javascript学习总结</h1><p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p>JavaScript 为动态的HTML提供了方法，</p><p>JavaScript能够改变 HTML 内容</p><p>JavaScript 能够改变 HTML 属性</p><p>JavaScript 能够改变 HTML 样式 (CSS)等</p><h3 id="js的使用"><a href="#js的使用" class="headerlink" title="js的使用"></a>js的使用</h3><script> 标签在 HTML 中，JavaScript 代码必须位于 <script> 与 </script> 标签之间<p>外部 JavaScript 的优势</p><p>在外部文件中放置脚本有如下优势：</p><p>分离了 HTML 和代码</p><p>使 HTML 和 JavaScript 更易于阅读和维护</p><p>已缓存的 JavaScript 文件可加速页面加载</p><p>如需向一张页面添加多个脚本文件 - 请使用多个 script 标签：</p><head>中的js函数（后面会具体总结这部分内容）将会在点击按钮时被调用<h2 id="JavaScript-程序"><a href="#JavaScript-程序" class="headerlink" title="JavaScript 程序"></a>JavaScript 程序</h2><p><em>计算机程序</em>是由计算机“执行”的一系列“指令”。</p><p>在编程语言中，这些编程<em>指令</em>被称为语句。</p><p><em>JavaScript 程序</em>就是一系列的编程<em>语句</em>。</p><p>关键字：var + 变量名</p><p>变量：</p><ul><li>undefined - 如果变量是 Undefined 类型的</li><li>boolean - 如果变量是 Boolean 类型的</li><li>number - 如果变量是 Number 类型的</li><li>string - 如果变量是 String 类型的</li><li>object - 如果变量是一种引用类型或 Null 类型的</li></ul><p><strong>常见的转义字符：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/23370499-7493bbab961e9a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/768/format/webp" alt="img"></p><p>image</p><p><strong>关系运算符：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/23370499-0277ba856243aeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/457/format/webp" alt="img"></p><p>image</p><p><strong>##js中数组</strong></p><p><strong>定义数组</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myArray=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()<br></code></pre></td></tr></table></figure><p>数组的赋值</p><p>1.<code>var mycars=new Array(3)mycars[0]=&quot;Saab&quot;mycars[1]=&quot;Volvo&quot;mycars[2]=&quot;BMW&quot;</code></p><p>2.<code>var mycars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;)</code></p><p>数组的用法</p><p>*利用 for in 来输出数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> x<br><br><span class="hljs-keyword">var</span> mycars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br><br>mycars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Saab&quot;</span><br><br>mycars[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Volvo&quot;</span><br><br>mycars[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;BMW&quot;</span><br><br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> mycars)<br><br>&#123;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mycars[x] + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>*数组的合并</p><p>设arr和arr2 是两个数组通过语句</p><p><code>arr.concat(arr2))</code>合并两个数组</p><p>*用数组元素组成字符串，用join语句</p><p><strong>##js中的对象</strong></p><p><strong>对象的定义：使用字符来定义和创建 JavaScript 对象:</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var person</span> = &#123;firstName:<span class="hljs-string">&quot;John&quot;</span>, lastName:<span class="hljs-string">&quot;Doe&quot;</span>, age:50, eyeColor:<span class="hljs-string">&quot;blue&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p><strong>访问对象的方法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">methodName : <span class="hljs-built_in">function</span>() &#123; <span class="hljs-selector-tag">code</span> lines &#125;<br></code></pre></td></tr></table></figure><p>你可以使用以下语法访问对象方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">objectName.<span class="hljs-keyword">method</span><span class="hljs-constructor">Name()</span><br></code></pre></td></tr></table></figure><p>通常 fullName() 是作为 person 对象的一个方法， fullName 是作为一个属性。</p><p>有多种方式可以创建，使用和修改 JavaScript 对象。</p><p>同样也有多种方式用来创建，使用和修改属性和方法。</p><h2 id="js中的函数"><a href="#js中的函数" class="headerlink" title="js中的函数"></a>js中的函数</h2><p>js中的函数语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs function">&#123;<br><br>    *// 执行代码*<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中函数可以带参数也可以不带参数，当函数带参数是，函数声明时要加变量名 例如function <em>functionname</em>(var1，var2)，其中如果函数是带有返回值的函数则需要用到return语句</p><p>注意：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</p><h2 id="js中的函数："><a href="#js中的函数：" class="headerlink" title="js中的函数："></a>js中的函数：</h2><p><strong>JavaScript 函数是被设计为执行特定任务的代码块。</strong></p><p><strong>JavaScript 函数会在某代码调用它时被执行。</strong></p><p><strong>例如代码：</strong></p><p><code>function myFunction(p1, p2) &#123; return p1 * p2;// 该函数返回 p1 和 p2 的乘积&#125;</code><br> 可见js的函数和编程语言的函数没什么太大的区别。**</p><p><strong>##js中的作用域</strong></p><p><strong>如果变量是在函数内部声明的，变量为局部作用域，既只能在函数内部使用（注意如果在函数内部定义变量时没有用关键字 var 则该变量为全局变量）</strong></p><p><strong>如果是在函数外部声明的则，则为全局变量，可以在所有脚本和函数中使用。</strong></p><h2 id="js事件"><a href="#js事件" class="headerlink" title="js事件"></a>js事件</h2><p><em>HTML中的事件可以用js来触发。</em></p><ul><li>HTML 事件的实例：</li><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击</li></ul><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;现在的时间是?&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>这是跟按钮被点击事件，事件触发显示时间</strong></p><p><strong>常用的时间</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/23370499-44771aafc27b119f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/792/format/webp" alt="img"></p><p>image</p><p><strong>##js中的语句</strong></p><p><strong>1.条件语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">**<span class="hljs-keyword">if</span> (*condition*)** <br><br>&#123;<br><br>*    当条件为 <span class="hljs-literal">true</span> 时执行的代码*<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.switch语句</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span>(n)&#123; <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><br>        执行代码块 <span class="hljs-number">1</span>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><br>        执行代码块 <span class="hljs-number">2</span>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br><br>        与 <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> 和 <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> 不同时执行的代码&#125;<br></code></pre></td></tr></table></figure><p>3.for循环</p><p>例改写代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[0]</span> + &quot;&lt;br&gt;&quot;); <br><br>document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[1]</span> + &quot;&lt;br&gt;&quot;); <br><br>document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[2]</span> + &quot;&lt;br&gt;&quot;); <br><br>document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[3]</span> + &quot;&lt;br&gt;&quot;); <br><br>document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[4]</span> + &quot;&lt;br&gt;&quot;); <br><br>document<span class="hljs-selector-class">.write</span>(cars<span class="hljs-selector-attr">[5]</span> + &quot;&lt;br&gt;&quot;);<br></code></pre></td></tr></table></figure><p>用for改写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;cars.length;i++)&#123;<br><br>    <span class="hljs-built_in">document</span>.write(cars[i] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);&#125;<br>...<br><span class="hljs-number">4.</span><span class="hljs-keyword">while</span>循环<br>...<br><span class="hljs-keyword">while</span> (*条件*)<br><br>&#123;<br><br>*    需要执行的代码*<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5.break 和 continue 语句</p><p>break用于跳出循环和高级语言没区别</p><p><strong>continue 语句</strong>中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。</p><h2 id="js中的错误和调试"><a href="#js中的错误和调试" class="headerlink" title="js中的错误和调试"></a>js中的错误和调试</h2><p>当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。</p><p>描述这种情况的技术术语是：JavaScript 将<strong>抛出</strong>一个错误。</p><p>finally 语句不论之前的 try 和 catch 中是否产生异常都会执行该代码块。</p><p>如果浏览器支持调试，你可以使用 console.log() 方法在调试窗口上打印 JavaScript 值：</p><p><strong>##js中的表单验证</strong></p><p><strong>表单中的信息，要用js来验证</strong></p><p><strong>表单数据经常需要使用 JavaScript 来验证其正确性：</strong></p><p>*验证表单数据是否为空？</p><p>*验证输入是否是一个正确的email地址？</p><p>*验证日期是否输入正确？</p><p>*验证表单输入内容是否为数字型？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateForm</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">var</span> x=<span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-string">&quot;myForm&quot;</span>][<span class="hljs-string">&quot;fname&quot;</span>].<span class="hljs-property">value</span>;<br><br>  <span class="hljs-keyword">if</span> (x==<span class="hljs-literal">null</span> || x==<span class="hljs-string">&quot;&quot;</span>)  &#123;    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;姓必须填写&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  &#125;&#125;<br></code></pre></td></tr></table></figure><p>上述例子通过js函数来判断表单是否为空。如果为空则弹出警告信息。</p><h2 id="js中的闭包"><a href="#js中的闭包" class="headerlink" title="js中的闭包"></a>js中的闭包</h2><p>js中嵌套函数可以访问上一层的函数变量。</p><p>例子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> add = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> counter += <span class="hljs-number">1</span>;&#125;&#125;)();<br><br><span class="hljs-title function_">add</span>();<span class="hljs-title function_">add</span>();<span class="hljs-title function_">add</span>();<br></code></pre></td></tr></table></figure><p>变量 <strong>add</strong> 指定了函数自我调用的返回字值。</p><p>自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。</p><p>add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。</p><p>这个叫作 JavaScript <strong>闭包。</strong>它使得函数拥有私有变量变成可能。</p><p>计数器受匿名函数的作用域保护，只能通过 add 方法修改。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前端三件套</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
